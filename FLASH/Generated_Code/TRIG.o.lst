   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TRIG.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	4
  23              		.section	.text.TRIG_Init,"ax",%progbits
  24              		.align	2
  25              		.global	TRIG_Init
  26              		.code	16
  27              		.thumb_func
  29              	TRIG_Init:
  30              	.LFB0:
  31              		.file 1 "../Generated_Code/TRIG.c"
   1:../Generated_Code/TRIG.c **** /* ###################################################################
   2:../Generated_Code/TRIG.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/TRIG.c **** **     Filename    : TRIG.c
   4:../Generated_Code/TRIG.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/TRIG.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/TRIG.c **** **     Component   : BitIO_LDD
   7:../Generated_Code/TRIG.c **** **     Version     : Component 01.033, Driver 01.03, CPU db: 3.00.000
   8:../Generated_Code/TRIG.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/TRIG.c **** **     Date/Time   : 2018-06-19, 13:19, # CodeGen: 79
  10:../Generated_Code/TRIG.c **** **     Abstract    :
  11:../Generated_Code/TRIG.c **** **         The HAL BitIO component provides a low level API for unified
  12:../Generated_Code/TRIG.c **** **         access to general purpose digital input/output pins across
  13:../Generated_Code/TRIG.c **** **         various device designs.
  14:../Generated_Code/TRIG.c **** **
  15:../Generated_Code/TRIG.c **** **         RTOS drivers using HAL BitIO API are simpler and more
  16:../Generated_Code/TRIG.c **** **         portable to various microprocessors.
  17:../Generated_Code/TRIG.c **** **     Settings    :
  18:../Generated_Code/TRIG.c **** **          Component name                                 : TRIG
  19:../Generated_Code/TRIG.c **** **          Pin for I/O                                    : PTA12/TPM1_CH0
  20:../Generated_Code/TRIG.c **** **          Pin signal                                     : US_Trig_D3
  21:../Generated_Code/TRIG.c **** **          Direction                                      : Output
  22:../Generated_Code/TRIG.c **** **          Initialization                                 : 
  23:../Generated_Code/TRIG.c **** **            Init. direction                              : Output
  24:../Generated_Code/TRIG.c **** **            Init. value                                  : 0
  25:../Generated_Code/TRIG.c **** **            Auto initialization                          : no
  26:../Generated_Code/TRIG.c **** **          Safe mode                                      : no
  27:../Generated_Code/TRIG.c **** **     Contents    :
  28:../Generated_Code/TRIG.c **** **         Init   - LDD_TDeviceData* TRIG_Init(LDD_TUserData *UserDataPtr);
  29:../Generated_Code/TRIG.c **** **         Deinit - void TRIG_Deinit(LDD_TDeviceData *DeviceDataPtr);
  30:../Generated_Code/TRIG.c **** **         GetVal - bool TRIG_GetVal(LDD_TDeviceData *DeviceDataPtr);
  31:../Generated_Code/TRIG.c **** **         PutVal - void TRIG_PutVal(LDD_TDeviceData *DeviceDataPtr, bool Val);
  32:../Generated_Code/TRIG.c **** **         ClrVal - void TRIG_ClrVal(LDD_TDeviceData *DeviceDataPtr);
  33:../Generated_Code/TRIG.c **** **         SetVal - void TRIG_SetVal(LDD_TDeviceData *DeviceDataPtr);
  34:../Generated_Code/TRIG.c **** **
  35:../Generated_Code/TRIG.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  36:../Generated_Code/TRIG.c **** **     All Rights Reserved.
  37:../Generated_Code/TRIG.c **** **     
  38:../Generated_Code/TRIG.c **** **     Redistribution and use in source and binary forms, with or without modification,
  39:../Generated_Code/TRIG.c **** **     are permitted provided that the following conditions are met:
  40:../Generated_Code/TRIG.c **** **     
  41:../Generated_Code/TRIG.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  42:../Generated_Code/TRIG.c **** **       of conditions and the following disclaimer.
  43:../Generated_Code/TRIG.c **** **     
  44:../Generated_Code/TRIG.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  45:../Generated_Code/TRIG.c **** **       list of conditions and the following disclaimer in the documentation and/or
  46:../Generated_Code/TRIG.c **** **       other materials provided with the distribution.
  47:../Generated_Code/TRIG.c **** **     
  48:../Generated_Code/TRIG.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  49:../Generated_Code/TRIG.c **** **       contributors may be used to endorse or promote products derived from this
  50:../Generated_Code/TRIG.c **** **       software without specific prior written permission.
  51:../Generated_Code/TRIG.c **** **     
  52:../Generated_Code/TRIG.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  53:../Generated_Code/TRIG.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  54:../Generated_Code/TRIG.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  55:../Generated_Code/TRIG.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  56:../Generated_Code/TRIG.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  57:../Generated_Code/TRIG.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  58:../Generated_Code/TRIG.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  59:../Generated_Code/TRIG.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  60:../Generated_Code/TRIG.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  61:../Generated_Code/TRIG.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  62:../Generated_Code/TRIG.c **** **     
  63:../Generated_Code/TRIG.c **** **     http: www.freescale.com
  64:../Generated_Code/TRIG.c **** **     mail: support@freescale.com
  65:../Generated_Code/TRIG.c **** ** ###################################################################*/
  66:../Generated_Code/TRIG.c **** /*!
  67:../Generated_Code/TRIG.c **** ** @file TRIG.c
  68:../Generated_Code/TRIG.c **** ** @version 01.03
  69:../Generated_Code/TRIG.c **** ** @brief
  70:../Generated_Code/TRIG.c **** **         The HAL BitIO component provides a low level API for unified
  71:../Generated_Code/TRIG.c **** **         access to general purpose digital input/output pins across
  72:../Generated_Code/TRIG.c **** **         various device designs.
  73:../Generated_Code/TRIG.c **** **
  74:../Generated_Code/TRIG.c **** **         RTOS drivers using HAL BitIO API are simpler and more
  75:../Generated_Code/TRIG.c **** **         portable to various microprocessors.
  76:../Generated_Code/TRIG.c **** */         
  77:../Generated_Code/TRIG.c **** /*!
  78:../Generated_Code/TRIG.c **** **  @addtogroup TRIG_module TRIG module documentation
  79:../Generated_Code/TRIG.c **** **  @{
  80:../Generated_Code/TRIG.c **** */         
  81:../Generated_Code/TRIG.c **** 
  82:../Generated_Code/TRIG.c **** /* MODULE TRIG. */
  83:../Generated_Code/TRIG.c **** 
  84:../Generated_Code/TRIG.c **** /* {Default RTOS Adapter} No RTOS includes */
  85:../Generated_Code/TRIG.c **** #include "TRIG.h"
  86:../Generated_Code/TRIG.c **** 
  87:../Generated_Code/TRIG.c **** #ifdef __cplusplus
  88:../Generated_Code/TRIG.c **** extern "C" {
  89:../Generated_Code/TRIG.c **** #endif 
  90:../Generated_Code/TRIG.c **** 
  91:../Generated_Code/TRIG.c **** typedef struct {
  92:../Generated_Code/TRIG.c ****   LDD_TUserData *UserDataPtr;          /* Pointer to user data */
  93:../Generated_Code/TRIG.c **** } TRIG_TDeviceData;                    /* Device data structure type */
  94:../Generated_Code/TRIG.c **** 
  95:../Generated_Code/TRIG.c **** typedef TRIG_TDeviceData *TRIG_TDeviceDataPtr ; /* Pointer to the device data structure. */
  96:../Generated_Code/TRIG.c **** 
  97:../Generated_Code/TRIG.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
  98:../Generated_Code/TRIG.c **** static TRIG_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  99:../Generated_Code/TRIG.c **** /*
 100:../Generated_Code/TRIG.c **** ** ===================================================================
 101:../Generated_Code/TRIG.c **** **     Method      :  TRIG_Init (component BitIO_LDD)
 102:../Generated_Code/TRIG.c **** */
 103:../Generated_Code/TRIG.c **** /*!
 104:../Generated_Code/TRIG.c **** **     @brief
 105:../Generated_Code/TRIG.c **** **         Initializes the device. Allocates memory for the device data
 106:../Generated_Code/TRIG.c **** **         structure, allocates interrupt vectors and sets interrupt
 107:../Generated_Code/TRIG.c **** **         priority, sets pin routing, sets timing, etc. If the "Enable
 108:../Generated_Code/TRIG.c **** **         in init. code" is set to "yes" value then the device is also
 109:../Generated_Code/TRIG.c **** **         enabled(see the description of the Enable() method). In this
 110:../Generated_Code/TRIG.c **** **         case the Enable() method is not necessary and needn't to be
 111:../Generated_Code/TRIG.c **** **         generated. 
 112:../Generated_Code/TRIG.c **** **     @param
 113:../Generated_Code/TRIG.c **** **         UserDataPtr     - Pointer to the user or
 114:../Generated_Code/TRIG.c **** **                           RTOS specific data. This pointer will be
 115:../Generated_Code/TRIG.c **** **                           passed as an event or callback parameter.
 116:../Generated_Code/TRIG.c **** **     @return
 117:../Generated_Code/TRIG.c **** **                         - Pointer to the dynamically allocated private
 118:../Generated_Code/TRIG.c **** **                           structure or NULL if there was an error.
 119:../Generated_Code/TRIG.c **** */
 120:../Generated_Code/TRIG.c **** /* ===================================================================*/
 121:../Generated_Code/TRIG.c **** LDD_TDeviceData* TRIG_Init(LDD_TUserData *UserDataPtr)
 122:../Generated_Code/TRIG.c **** {
  32              		.loc 1 122 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
 123:../Generated_Code/TRIG.c ****   /* Allocate device structure */
 124:../Generated_Code/TRIG.c ****   TRIG_TDeviceDataPtr DeviceDataPrv;
 125:../Generated_Code/TRIG.c **** 
 126:../Generated_Code/TRIG.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 127:../Generated_Code/TRIG.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  46              		.loc 1 127 0
  47 0008 114B     		ldr	r3, .L3
  48 000a FB60     		str	r3, [r7, #12]
 128:../Generated_Code/TRIG.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  49              		.loc 1 128 0
  50 000c FB68     		ldr	r3, [r7, #12]
  51 000e 7A68     		ldr	r2, [r7, #4]
  52 0010 1A60     		str	r2, [r3]
 129:../Generated_Code/TRIG.c ****   /* Configure pin as output */
 130:../Generated_Code/TRIG.c ****   /* GPIOA_PDDR: PDD|=0x1000 */
 131:../Generated_Code/TRIG.c ****   GPIOA_PDDR |= GPIO_PDDR_PDD(0x1000);
  53              		.loc 1 131 0
  54 0012 104B     		ldr	r3, .L3+4
  55 0014 0F4A     		ldr	r2, .L3+4
  56 0016 5269     		ldr	r2, [r2, #20]
  57 0018 8021     		mov	r1, #128
  58 001a 4901     		lsl	r1, r1, #5
  59 001c 0A43     		orr	r2, r1
  60 001e 5A61     		str	r2, [r3, #20]
 132:../Generated_Code/TRIG.c ****   /* Set initialization value */
 133:../Generated_Code/TRIG.c ****   /* GPIOA_PDOR: PDO&=~0x1000 */
 134:../Generated_Code/TRIG.c ****   GPIOA_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x1000));
  61              		.loc 1 134 0
  62 0020 0C4B     		ldr	r3, .L3+4
  63 0022 0C4A     		ldr	r2, .L3+4
  64 0024 1168     		ldr	r1, [r2]
  65 0026 0C4A     		ldr	r2, .L3+8
  66 0028 0A40     		and	r2, r1
  67 002a 1A60     		str	r2, [r3]
 135:../Generated_Code/TRIG.c ****   /* Initialization of Port Control register */
 136:../Generated_Code/TRIG.c ****   /* PORTA_PCR12: ISF=0,MUX=1 */
 137:../Generated_Code/TRIG.c ****   PORTA_PCR12 = (uint32_t)((PORTA_PCR12 & (uint32_t)~(uint32_t)(
  68              		.loc 1 137 0
  69 002c 0B4B     		ldr	r3, .L3+12
  70 002e 0B4A     		ldr	r2, .L3+12
  71 0030 116B     		ldr	r1, [r2, #48]
  72 0032 0B4A     		ldr	r2, .L3+16
  73 0034 0A40     		and	r2, r1
  74 0036 8021     		mov	r1, #128
  75 0038 4900     		lsl	r1, r1, #1
  76 003a 0A43     		orr	r2, r1
  77 003c 1A63     		str	r2, [r3, #48]
 138:../Generated_Code/TRIG.c ****                  PORT_PCR_ISF_MASK |
 139:../Generated_Code/TRIG.c ****                  PORT_PCR_MUX(0x06)
 140:../Generated_Code/TRIG.c ****                 )) | (uint32_t)(
 141:../Generated_Code/TRIG.c ****                  PORT_PCR_MUX(0x01)
 142:../Generated_Code/TRIG.c ****                 ));
 143:../Generated_Code/TRIG.c ****   /* Registration of the device structure */
 144:../Generated_Code/TRIG.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TRIG_ID,DeviceDataPrv);
  78              		.loc 1 144 0
  79 003e 094B     		ldr	r3, .L3+20
  80 0040 FA68     		ldr	r2, [r7, #12]
  81 0042 1A60     		str	r2, [r3]
 145:../Generated_Code/TRIG.c ****   return ((LDD_TDeviceData *)DeviceDataPrv);
  82              		.loc 1 145 0
  83 0044 FB68     		ldr	r3, [r7, #12]
 146:../Generated_Code/TRIG.c **** }
  84              		.loc 1 146 0
  85 0046 181C     		mov	r0, r3
  86 0048 BD46     		mov	sp, r7
  87 004a 04B0     		add	sp, sp, #16
  88              		@ sp needed for prologue
  89 004c 80BD     		pop	{r7, pc}
  90              	.L4:
  91 004e C046     		.align	2
  92              	.L3:
  93 0050 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
  94 0054 00F00F40 		.word	1074786304
  95 0058 FFEFFFFF 		.word	-4097
  96 005c 00900440 		.word	1074040832
  97 0060 FFF8FFFE 		.word	-16779009
  98 0064 00000000 		.word	PE_LDD_DeviceDataList
  99              		.cfi_endproc
 100              	.LFE0:
 102              		.section	.text.TRIG_Deinit,"ax",%progbits
 103              		.align	2
 104              		.global	TRIG_Deinit
 105              		.code	16
 106              		.thumb_func
 108              	TRIG_Deinit:
 109              	.LFB1:
 147:../Generated_Code/TRIG.c **** /*
 148:../Generated_Code/TRIG.c **** ** ===================================================================
 149:../Generated_Code/TRIG.c **** **     Method      :  TRIG_Deinit (component BitIO_LDD)
 150:../Generated_Code/TRIG.c **** */
 151:../Generated_Code/TRIG.c **** /*!
 152:../Generated_Code/TRIG.c **** **     @brief
 153:../Generated_Code/TRIG.c **** **          Deinitializes the device. Switches off the device, frees
 154:../Generated_Code/TRIG.c **** **         the device data structure memory, interrupts vectors, etc.
 155:../Generated_Code/TRIG.c **** **     @param
 156:../Generated_Code/TRIG.c **** **         DeviceDataPtr   - Device data structure
 157:../Generated_Code/TRIG.c **** **                           pointer returned by <Init> method.
 158:../Generated_Code/TRIG.c **** */
 159:../Generated_Code/TRIG.c **** /* ===================================================================*/
 160:../Generated_Code/TRIG.c **** void TRIG_Deinit(LDD_TDeviceData *DeviceDataPtr)
 161:../Generated_Code/TRIG.c **** {
 110              		.loc 1 161 0
 111              		.cfi_startproc
 112 0000 80B5     		push	{r7, lr}
 113              	.LCFI3:
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 0002 82B0     		sub	sp, sp, #8
 118              	.LCFI4:
 119              		.cfi_def_cfa_offset 16
 120 0004 00AF     		add	r7, sp, #0
 121              	.LCFI5:
 122              		.cfi_def_cfa_register 7
 123 0006 7860     		str	r0, [r7, #4]
 162:../Generated_Code/TRIG.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 163:../Generated_Code/TRIG.c ****   /* GPIOA_PDDR: PDD&=~0x1000 */
 164:../Generated_Code/TRIG.c ****   GPIOA_PDDR &= (uint32_t)~(uint32_t)(GPIO_PDDR_PDD(0x1000));
 124              		.loc 1 164 0
 125 0008 054B     		ldr	r3, .L6
 126 000a 054A     		ldr	r2, .L6
 127 000c 5169     		ldr	r1, [r2, #20]
 128 000e 054A     		ldr	r2, .L6+4
 129 0010 0A40     		and	r2, r1
 130 0012 5A61     		str	r2, [r3, #20]
 165:../Generated_Code/TRIG.c ****   /* Unregistration of the device structure */
 166:../Generated_Code/TRIG.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_TRIG_ID);
 131              		.loc 1 166 0
 132 0014 044B     		ldr	r3, .L6+8
 133 0016 0022     		mov	r2, #0
 134 0018 1A60     		str	r2, [r3]
 167:../Generated_Code/TRIG.c ****   /* Deallocation of the device structure */
 168:../Generated_Code/TRIG.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 169:../Generated_Code/TRIG.c **** }
 135              		.loc 1 169 0
 136 001a BD46     		mov	sp, r7
 137 001c 02B0     		add	sp, sp, #8
 138              		@ sp needed for prologue
 139 001e 80BD     		pop	{r7, pc}
 140              	.L7:
 141              		.align	2
 142              	.L6:
 143 0020 00F00F40 		.word	1074786304
 144 0024 FFEFFFFF 		.word	-4097
 145 0028 00000000 		.word	PE_LDD_DeviceDataList
 146              		.cfi_endproc
 147              	.LFE1:
 149              		.section	.text.TRIG_GetVal,"ax",%progbits
 150              		.align	2
 151              		.global	TRIG_GetVal
 152              		.code	16
 153              		.thumb_func
 155              	TRIG_GetVal:
 156              	.LFB2:
 170:../Generated_Code/TRIG.c **** 
 171:../Generated_Code/TRIG.c **** /*
 172:../Generated_Code/TRIG.c **** ** ===================================================================
 173:../Generated_Code/TRIG.c **** **     Method      :  TRIG_GetVal (component BitIO_LDD)
 174:../Generated_Code/TRIG.c **** */
 175:../Generated_Code/TRIG.c **** /*!
 176:../Generated_Code/TRIG.c **** **     @brief
 177:../Generated_Code/TRIG.c **** **         Returns the input/output value. If the direction is [input]
 178:../Generated_Code/TRIG.c **** **         then the input value of the pin is read and returned. If the
 179:../Generated_Code/TRIG.c **** **         direction is [output] then the last written value is read
 180:../Generated_Code/TRIG.c **** **         and returned (see <Safe mode> property for limitations).
 181:../Generated_Code/TRIG.c **** **         This method cannot be disabled if direction is [input].
 182:../Generated_Code/TRIG.c **** **     @param
 183:../Generated_Code/TRIG.c **** **         DeviceDataPtr   - Device data structure
 184:../Generated_Code/TRIG.c **** **                           pointer returned by <Init> method.
 185:../Generated_Code/TRIG.c **** **     @return
 186:../Generated_Code/TRIG.c **** **                         - Input or output value. Possible values:
 187:../Generated_Code/TRIG.c **** **                           <false> - logical "0" (Low level)
 188:../Generated_Code/TRIG.c **** **                           <true> - logical "1" (High level)
 189:../Generated_Code/TRIG.c **** */
 190:../Generated_Code/TRIG.c **** /* ===================================================================*/
 191:../Generated_Code/TRIG.c **** bool TRIG_GetVal(LDD_TDeviceData *DeviceDataPtr)
 192:../Generated_Code/TRIG.c **** {
 157              		.loc 1 192 0
 158              		.cfi_startproc
 159 0000 80B5     		push	{r7, lr}
 160              	.LCFI6:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 7, -8
 163              		.cfi_offset 14, -4
 164 0002 84B0     		sub	sp, sp, #16
 165              	.LCFI7:
 166              		.cfi_def_cfa_offset 24
 167 0004 00AF     		add	r7, sp, #0
 168              	.LCFI8:
 169              		.cfi_def_cfa_register 7
 170 0006 7860     		str	r0, [r7, #4]
 193:../Generated_Code/TRIG.c ****   uint32_t PortData;                   /* Port data masked according to the bit used */
 194:../Generated_Code/TRIG.c **** 
 195:../Generated_Code/TRIG.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 196:../Generated_Code/TRIG.c ****   PortData = GPIO_PDD_GetPortDataOutput(TRIG_MODULE_BASE_ADDRESS) & TRIG_PORT_MASK;
 171              		.loc 1 196 0
 172 0008 064B     		ldr	r3, .L10
 173 000a 1A68     		ldr	r2, [r3]
 174 000c 8023     		mov	r3, #128
 175 000e 5B01     		lsl	r3, r3, #5
 176 0010 1340     		and	r3, r2
 177 0012 FB60     		str	r3, [r7, #12]
 197:../Generated_Code/TRIG.c ****   return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
 178              		.loc 1 197 0
 179 0014 FB68     		ldr	r3, [r7, #12]
 180 0016 5A1E     		sub	r2, r3, #1
 181 0018 9341     		sbc	r3, r3, r2
 182 001a DBB2     		uxtb	r3, r3
 198:../Generated_Code/TRIG.c **** }
 183              		.loc 1 198 0
 184 001c 181C     		mov	r0, r3
 185 001e BD46     		mov	sp, r7
 186 0020 04B0     		add	sp, sp, #16
 187              		@ sp needed for prologue
 188 0022 80BD     		pop	{r7, pc}
 189              	.L11:
 190              		.align	2
 191              	.L10:
 192 0024 00F00FF8 		.word	-133173248
 193              		.cfi_endproc
 194              	.LFE2:
 196              		.section	.text.TRIG_PutVal,"ax",%progbits
 197              		.align	2
 198              		.global	TRIG_PutVal
 199              		.code	16
 200              		.thumb_func
 202              	TRIG_PutVal:
 203              	.LFB3:
 199:../Generated_Code/TRIG.c **** 
 200:../Generated_Code/TRIG.c **** /*
 201:../Generated_Code/TRIG.c **** ** ===================================================================
 202:../Generated_Code/TRIG.c **** **     Method      :  TRIG_PutVal (component BitIO_LDD)
 203:../Generated_Code/TRIG.c **** */
 204:../Generated_Code/TRIG.c **** /*!
 205:../Generated_Code/TRIG.c **** **     @brief
 206:../Generated_Code/TRIG.c **** **         The specified output value is set. If the direction is <b>
 207:../Generated_Code/TRIG.c **** **         input</b>, the component saves the value to a memory or a
 208:../Generated_Code/TRIG.c **** **         register and this value will be written to the pin after
 209:../Generated_Code/TRIG.c **** **         switching to the output mode (using <tt>SetDir(TRUE)</tt>;
 210:../Generated_Code/TRIG.c **** **         see <a href="BitIOProperties.html#SafeMode">Safe mode</a>
 211:../Generated_Code/TRIG.c **** **         property for limitations). If the direction is <b>output</b>,
 212:../Generated_Code/TRIG.c **** **         it writes the value to the pin. (Method is available only if
 213:../Generated_Code/TRIG.c **** **         the direction = <u><tt>output</tt></u> or <u><tt>
 214:../Generated_Code/TRIG.c **** **         input/output</tt></u>).
 215:../Generated_Code/TRIG.c **** **     @param
 216:../Generated_Code/TRIG.c **** **         DeviceDataPtr   - Device data structure
 217:../Generated_Code/TRIG.c **** **                           pointer returned by <Init> method.
 218:../Generated_Code/TRIG.c **** **     @param
 219:../Generated_Code/TRIG.c **** **         Val             - Output value. Possible values:
 220:../Generated_Code/TRIG.c **** **                           <false> - logical "0" (Low level)
 221:../Generated_Code/TRIG.c **** **                           <true> - logical "1" (High level)
 222:../Generated_Code/TRIG.c **** */
 223:../Generated_Code/TRIG.c **** /* ===================================================================*/
 224:../Generated_Code/TRIG.c **** void TRIG_PutVal(LDD_TDeviceData *DeviceDataPtr, bool Val)
 225:../Generated_Code/TRIG.c **** {
 204              		.loc 1 225 0
 205              		.cfi_startproc
 206 0000 80B5     		push	{r7, lr}
 207              	.LCFI9:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 7, -8
 210              		.cfi_offset 14, -4
 211 0002 82B0     		sub	sp, sp, #8
 212              	.LCFI10:
 213              		.cfi_def_cfa_offset 16
 214 0004 00AF     		add	r7, sp, #0
 215              	.LCFI11:
 216              		.cfi_def_cfa_register 7
 217 0006 7860     		str	r0, [r7, #4]
 218 0008 0A1C     		mov	r2, r1
 219 000a FB1C     		add	r3, r7, #3
 220 000c 1A70     		strb	r2, [r3]
 226:../Generated_Code/TRIG.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 227:../Generated_Code/TRIG.c ****   if (Val) {
 221              		.loc 1 227 0
 222 000e FB1C     		add	r3, r7, #3
 223 0010 1B78     		ldrb	r3, [r3]
 224 0012 002B     		cmp	r3, #0
 225 0014 04D0     		beq	.L13
 228:../Generated_Code/TRIG.c ****     GPIO_PDD_SetPortDataOutputMask(TRIG_MODULE_BASE_ADDRESS, TRIG_PORT_MASK);
 226              		.loc 1 228 0
 227 0016 064B     		ldr	r3, .L15
 228 0018 8022     		mov	r2, #128
 229 001a 5201     		lsl	r2, r2, #5
 230 001c 5A60     		str	r2, [r3, #4]
 231 001e 03E0     		b	.L12
 232              	.L13:
 229:../Generated_Code/TRIG.c ****   } else { /* !Val */
 230:../Generated_Code/TRIG.c ****     GPIO_PDD_ClearPortDataOutputMask(TRIG_MODULE_BASE_ADDRESS, TRIG_PORT_MASK);
 233              		.loc 1 230 0
 234 0020 034B     		ldr	r3, .L15
 235 0022 8022     		mov	r2, #128
 236 0024 5201     		lsl	r2, r2, #5
 237 0026 9A60     		str	r2, [r3, #8]
 238              	.L12:
 231:../Generated_Code/TRIG.c ****   } /* !Val */
 232:../Generated_Code/TRIG.c **** }
 239              		.loc 1 232 0
 240 0028 BD46     		mov	sp, r7
 241 002a 02B0     		add	sp, sp, #8
 242              		@ sp needed for prologue
 243 002c 80BD     		pop	{r7, pc}
 244              	.L16:
 245 002e C046     		.align	2
 246              	.L15:
 247 0030 00F00FF8 		.word	-133173248
 248              		.cfi_endproc
 249              	.LFE3:
 251              		.section	.text.TRIG_ClrVal,"ax",%progbits
 252              		.align	2
 253              		.global	TRIG_ClrVal
 254              		.code	16
 255              		.thumb_func
 257              	TRIG_ClrVal:
 258              	.LFB4:
 233:../Generated_Code/TRIG.c **** 
 234:../Generated_Code/TRIG.c **** /*
 235:../Generated_Code/TRIG.c **** ** ===================================================================
 236:../Generated_Code/TRIG.c **** **     Method      :  TRIG_ClrVal (component BitIO_LDD)
 237:../Generated_Code/TRIG.c **** */
 238:../Generated_Code/TRIG.c **** /*!
 239:../Generated_Code/TRIG.c **** **     @brief
 240:../Generated_Code/TRIG.c **** **         Clears (set to zero) the output value. It is equivalent to
 241:../Generated_Code/TRIG.c **** **         the [PutVal(FALSE)]. This method is available only if the
 242:../Generated_Code/TRIG.c **** **         direction = _[output]_ or _[input/output]_.
 243:../Generated_Code/TRIG.c **** **     @param
 244:../Generated_Code/TRIG.c **** **         DeviceDataPtr   - Pointer to device data
 245:../Generated_Code/TRIG.c **** **                           structure returned by <Init> method.
 246:../Generated_Code/TRIG.c **** */
 247:../Generated_Code/TRIG.c **** /* ===================================================================*/
 248:../Generated_Code/TRIG.c **** void TRIG_ClrVal(LDD_TDeviceData *DeviceDataPtr)
 249:../Generated_Code/TRIG.c **** {
 259              		.loc 1 249 0
 260              		.cfi_startproc
 261 0000 80B5     		push	{r7, lr}
 262              	.LCFI12:
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 7, -8
 265              		.cfi_offset 14, -4
 266 0002 82B0     		sub	sp, sp, #8
 267              	.LCFI13:
 268              		.cfi_def_cfa_offset 16
 269 0004 00AF     		add	r7, sp, #0
 270              	.LCFI14:
 271              		.cfi_def_cfa_register 7
 272 0006 7860     		str	r0, [r7, #4]
 250:../Generated_Code/TRIG.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 251:../Generated_Code/TRIG.c ****   GPIO_PDD_ClearPortDataOutputMask(TRIG_MODULE_BASE_ADDRESS, TRIG_PORT_MASK);
 273              		.loc 1 251 0
 274 0008 034B     		ldr	r3, .L18
 275 000a 8022     		mov	r2, #128
 276 000c 5201     		lsl	r2, r2, #5
 277 000e 9A60     		str	r2, [r3, #8]
 252:../Generated_Code/TRIG.c **** }
 278              		.loc 1 252 0
 279 0010 BD46     		mov	sp, r7
 280 0012 02B0     		add	sp, sp, #8
 281              		@ sp needed for prologue
 282 0014 80BD     		pop	{r7, pc}
 283              	.L19:
 284 0016 C046     		.align	2
 285              	.L18:
 286 0018 00F00FF8 		.word	-133173248
 287              		.cfi_endproc
 288              	.LFE4:
 290              		.section	.text.TRIG_SetVal,"ax",%progbits
 291              		.align	2
 292              		.global	TRIG_SetVal
 293              		.code	16
 294              		.thumb_func
 296              	TRIG_SetVal:
 297              	.LFB5:
 253:../Generated_Code/TRIG.c **** 
 254:../Generated_Code/TRIG.c **** /*
 255:../Generated_Code/TRIG.c **** ** ===================================================================
 256:../Generated_Code/TRIG.c **** **     Method      :  TRIG_SetVal (component BitIO_LDD)
 257:../Generated_Code/TRIG.c **** */
 258:../Generated_Code/TRIG.c **** /*!
 259:../Generated_Code/TRIG.c **** **     @brief
 260:../Generated_Code/TRIG.c **** **         Sets (to one) the output value. It is equivalent to the
 261:../Generated_Code/TRIG.c **** **         [PutVal(TRUE)]. This method is available only if the
 262:../Generated_Code/TRIG.c **** **         direction = _[output]_ or _[input/output]_.
 263:../Generated_Code/TRIG.c **** **     @param
 264:../Generated_Code/TRIG.c **** **         DeviceDataPtr   - Pointer to device data
 265:../Generated_Code/TRIG.c **** **                           structure returned by <Init> method.
 266:../Generated_Code/TRIG.c **** */
 267:../Generated_Code/TRIG.c **** /* ===================================================================*/
 268:../Generated_Code/TRIG.c **** void TRIG_SetVal(LDD_TDeviceData *DeviceDataPtr)
 269:../Generated_Code/TRIG.c **** {
 298              		.loc 1 269 0
 299              		.cfi_startproc
 300 0000 80B5     		push	{r7, lr}
 301              	.LCFI15:
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 7, -8
 304              		.cfi_offset 14, -4
 305 0002 82B0     		sub	sp, sp, #8
 306              	.LCFI16:
 307              		.cfi_def_cfa_offset 16
 308 0004 00AF     		add	r7, sp, #0
 309              	.LCFI17:
 310              		.cfi_def_cfa_register 7
 311 0006 7860     		str	r0, [r7, #4]
 270:../Generated_Code/TRIG.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 271:../Generated_Code/TRIG.c ****   GPIO_PDD_SetPortDataOutputMask(TRIG_MODULE_BASE_ADDRESS, TRIG_PORT_MASK);
 312              		.loc 1 271 0
 313 0008 034B     		ldr	r3, .L21
 314 000a 8022     		mov	r2, #128
 315 000c 5201     		lsl	r2, r2, #5
 316 000e 5A60     		str	r2, [r3, #4]
 272:../Generated_Code/TRIG.c **** }
 317              		.loc 1 272 0
 318 0010 BD46     		mov	sp, r7
 319 0012 02B0     		add	sp, sp, #8
 320              		@ sp needed for prologue
 321 0014 80BD     		pop	{r7, pc}
 322              	.L22:
 323 0016 C046     		.align	2
 324              	.L21:
 325 0018 00F00FF8 		.word	-133173248
 326              		.cfi_endproc
 327              	.LFE5:
 329              		.text
 330              	.Letext0:
 331              		.file 2 "D:/Freescale/CodeWarrior11/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 332              		.file 3 "../Generated_Code/PE_Types.h"
 333              		.file 4 "D:/Git/DronePrototype/Project_Headers/MKL25Z4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TRIG.c
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:24     .text.TRIG_Init:00000000 $t
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:29     .text.TRIG_Init:00000000 TRIG_Init
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:93     .text.TRIG_Init:00000050 $d
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:103    .text.TRIG_Deinit:00000000 $t
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:108    .text.TRIG_Deinit:00000000 TRIG_Deinit
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:143    .text.TRIG_Deinit:00000020 $d
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:150    .text.TRIG_GetVal:00000000 $t
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:155    .text.TRIG_GetVal:00000000 TRIG_GetVal
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:192    .text.TRIG_GetVal:00000024 $d
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:197    .text.TRIG_PutVal:00000000 $t
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:202    .text.TRIG_PutVal:00000000 TRIG_PutVal
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:247    .text.TRIG_PutVal:00000030 $d
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:252    .text.TRIG_ClrVal:00000000 $t
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:257    .text.TRIG_ClrVal:00000000 TRIG_ClrVal
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:286    .text.TRIG_ClrVal:00000018 $d
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:291    .text.TRIG_SetVal:00000000 $t
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:296    .text.TRIG_SetVal:00000000 TRIG_SetVal
C:\Users\David\AppData\Local\Temp\cc26Pxgn.s:325    .text.TRIG_SetVal:00000018 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
