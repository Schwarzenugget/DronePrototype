   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TU1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	AccReady,1,1
  18              		.comm	PrintReady,1,1
  19              		.comm	AccData,6,4
  20              		.comm	Xout_14_bit,2,2
  21              		.comm	Yout_14_bit,2,2
  22              		.comm	Zout_14_bit,2,2
  23              		.comm	Zout_g,4,4
  24              		.comm	Xoffset,1,1
  25              		.comm	Yoffset,1,1
  26              		.comm	Zoffset,1,1
  27              		.section	.rodata.ChannelDevice,"a",%progbits
  28              		.align	2
  31              	ChannelDevice:
  32 0000 04       		.byte	4
  33 0001 000000   		.section	.rodata.ChannelMode,"a",%progbits
  34              		.align	2
  37              	ChannelMode:
  38 0000 01       		.byte	1
  39 0001 000000   		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  40              		.align	2
  43              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  44 0000 00000000 		.space	8
  44      00000000 
  45              		.section	.bss.INT_TPM0__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  46              		.align	2
  49              	INT_TPM0__DEFAULT_RTOS_ISRPARAM:
  50 0000 00000000 		.space	4
  51              		.section	.text.TU1_Init,"ax",%progbits
  52              		.align	2
  53              		.global	TU1_Init
  54              		.code	16
  55              		.thumb_func
  57              	TU1_Init:
  58              	.LFB0:
  59              		.file 1 "../Generated_Code/TU1.c"
   1:../Generated_Code/TU1.c **** /* ###################################################################
   2:../Generated_Code/TU1.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/TU1.c **** **     Filename    : TU1.c
   4:../Generated_Code/TU1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/TU1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/TU1.c **** **     Component   : TimerUnit_LDD
   7:../Generated_Code/TU1.c **** **     Version     : Component 01.164, Driver 01.11, CPU db: 3.00.000
   8:../Generated_Code/TU1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/TU1.c **** **     Date/Time   : 2018-06-06, 15:30, # CodeGen: 52
  10:../Generated_Code/TU1.c **** **     Abstract    :
  11:../Generated_Code/TU1.c **** **          This TimerUnit component provides a low level API for unified hardware access across
  12:../Generated_Code/TU1.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
  13:../Generated_Code/TU1.c **** **     Settings    :
  14:../Generated_Code/TU1.c **** **          Component name                                 : TU1
  15:../Generated_Code/TU1.c **** **          Module name                                    : TPM0
  16:../Generated_Code/TU1.c **** **          Counter                                        : TPM0_CNT
  17:../Generated_Code/TU1.c **** **          Counter direction                              : Up
  18:../Generated_Code/TU1.c **** **          Counter width                                  : 16 bits
  19:../Generated_Code/TU1.c **** **          Value type                                     : Optimal
  20:../Generated_Code/TU1.c **** **          Input clock source                             : Internal
  21:../Generated_Code/TU1.c **** **            Counter frequency                            : 2.62144 MHz
  22:../Generated_Code/TU1.c **** **          Counter restart                                : On-overrun
  23:../Generated_Code/TU1.c **** **            Overrun period                               : 25 ms
  24:../Generated_Code/TU1.c **** **            Interrupt                                    : Enabled
  25:../Generated_Code/TU1.c **** **              Interrupt                                  : INT_TPM0
  26:../Generated_Code/TU1.c **** **              Interrupt priority                         : medium priority
  27:../Generated_Code/TU1.c **** **          Channel list                                   : 1
  28:../Generated_Code/TU1.c **** **            Channel 0                                    : 
  29:../Generated_Code/TU1.c **** **              Mode                                       : Capture
  30:../Generated_Code/TU1.c **** **                Capture                                  : TPM0_C4V
  31:../Generated_Code/TU1.c **** **                Capture input pin                        : PTD4/LLWU_P14/SPI1_PCS0/UART2_RX/TPM0_
  32:../Generated_Code/TU1.c **** **                Capture input signal                     : US_Echo_D2
  33:../Generated_Code/TU1.c **** **                Edge                                     : both edges
  34:../Generated_Code/TU1.c **** **                Maximum time of event                    : 25.00001792 ms
  35:../Generated_Code/TU1.c **** **                Interrupt                                : Enabled
  36:../Generated_Code/TU1.c **** **                  Interrupt                              : INT_TPM0
  37:../Generated_Code/TU1.c **** **                  Interrupt priority                     : medium priority
  38:../Generated_Code/TU1.c **** **          Initialization                                 : 
  39:../Generated_Code/TU1.c **** **            Enabled in init. code                        : yes
  40:../Generated_Code/TU1.c **** **            Auto initialization                          : no
  41:../Generated_Code/TU1.c **** **            Event mask                                   : 
  42:../Generated_Code/TU1.c **** **              OnCounterRestart                           : Enabled
  43:../Generated_Code/TU1.c **** **              OnChannel0                                 : Enabled
  44:../Generated_Code/TU1.c **** **              OnChannel1                                 : Disabled
  45:../Generated_Code/TU1.c **** **              OnChannel2                                 : Disabled
  46:../Generated_Code/TU1.c **** **              OnChannel3                                 : Disabled
  47:../Generated_Code/TU1.c **** **              OnChannel4                                 : Disabled
  48:../Generated_Code/TU1.c **** **              OnChannel5                                 : Disabled
  49:../Generated_Code/TU1.c **** **              OnChannel6                                 : Disabled
  50:../Generated_Code/TU1.c **** **              OnChannel7                                 : Disabled
  51:../Generated_Code/TU1.c **** **          CPU clock/configuration selection              : 
  52:../Generated_Code/TU1.c **** **            Clock configuration 0                        : This component enabled
  53:../Generated_Code/TU1.c **** **            Clock configuration 1                        : This component disabled
  54:../Generated_Code/TU1.c **** **            Clock configuration 2                        : This component disabled
  55:../Generated_Code/TU1.c **** **            Clock configuration 3                        : This component disabled
  56:../Generated_Code/TU1.c **** **            Clock configuration 4                        : This component disabled
  57:../Generated_Code/TU1.c **** **            Clock configuration 5                        : This component disabled
  58:../Generated_Code/TU1.c **** **            Clock configuration 6                        : This component disabled
  59:../Generated_Code/TU1.c **** **            Clock configuration 7                        : This component disabled
  60:../Generated_Code/TU1.c **** **     Contents    :
  61:../Generated_Code/TU1.c **** **         Init            - LDD_TDeviceData* TU1_Init(LDD_TUserData *UserDataPtr);
  62:../Generated_Code/TU1.c **** **         Deinit          - void TU1_Deinit(LDD_TDeviceData *DeviceDataPtr);
  63:../Generated_Code/TU1.c **** **         ResetCounter    - LDD_TError TU1_ResetCounter(LDD_TDeviceData *DeviceDataPtr);
  64:../Generated_Code/TU1.c **** **         GetCaptureValue - LDD_TError TU1_GetCaptureValue(LDD_TDeviceData *DeviceDataPtr, uint8_t
  65:../Generated_Code/TU1.c **** **
  66:../Generated_Code/TU1.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  67:../Generated_Code/TU1.c **** **     All Rights Reserved.
  68:../Generated_Code/TU1.c **** **     
  69:../Generated_Code/TU1.c **** **     Redistribution and use in source and binary forms, with or without modification,
  70:../Generated_Code/TU1.c **** **     are permitted provided that the following conditions are met:
  71:../Generated_Code/TU1.c **** **     
  72:../Generated_Code/TU1.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  73:../Generated_Code/TU1.c **** **       of conditions and the following disclaimer.
  74:../Generated_Code/TU1.c **** **     
  75:../Generated_Code/TU1.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  76:../Generated_Code/TU1.c **** **       list of conditions and the following disclaimer in the documentation and/or
  77:../Generated_Code/TU1.c **** **       other materials provided with the distribution.
  78:../Generated_Code/TU1.c **** **     
  79:../Generated_Code/TU1.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  80:../Generated_Code/TU1.c **** **       contributors may be used to endorse or promote products derived from this
  81:../Generated_Code/TU1.c **** **       software without specific prior written permission.
  82:../Generated_Code/TU1.c **** **     
  83:../Generated_Code/TU1.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  84:../Generated_Code/TU1.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  85:../Generated_Code/TU1.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  86:../Generated_Code/TU1.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  87:../Generated_Code/TU1.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  88:../Generated_Code/TU1.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  89:../Generated_Code/TU1.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  90:../Generated_Code/TU1.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  91:../Generated_Code/TU1.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  92:../Generated_Code/TU1.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  93:../Generated_Code/TU1.c **** **     
  94:../Generated_Code/TU1.c **** **     http: www.freescale.com
  95:../Generated_Code/TU1.c **** **     mail: support@freescale.com
  96:../Generated_Code/TU1.c **** ** ###################################################################*/
  97:../Generated_Code/TU1.c **** /*!
  98:../Generated_Code/TU1.c **** ** @file TU1.c
  99:../Generated_Code/TU1.c **** ** @version 01.11
 100:../Generated_Code/TU1.c **** ** @brief
 101:../Generated_Code/TU1.c **** **          This TimerUnit component provides a low level API for unified hardware access across
 102:../Generated_Code/TU1.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
 103:../Generated_Code/TU1.c **** */         
 104:../Generated_Code/TU1.c **** /*!
 105:../Generated_Code/TU1.c **** **  @addtogroup TU1_module TU1 module documentation
 106:../Generated_Code/TU1.c **** **  @{
 107:../Generated_Code/TU1.c **** */         
 108:../Generated_Code/TU1.c **** 
 109:../Generated_Code/TU1.c **** /* MODULE TU1. */
 110:../Generated_Code/TU1.c **** 
 111:../Generated_Code/TU1.c **** #include "Events.h"
 112:../Generated_Code/TU1.c **** #include "TU1.h"
 113:../Generated_Code/TU1.c **** /* {Default RTOS Adapter} No RTOS includes */
 114:../Generated_Code/TU1.c **** #include "IO_Map.h"
 115:../Generated_Code/TU1.c **** 
 116:../Generated_Code/TU1.c **** #ifdef __cplusplus
 117:../Generated_Code/TU1.c **** extern "C" {
 118:../Generated_Code/TU1.c **** #endif 
 119:../Generated_Code/TU1.c **** 
 120:../Generated_Code/TU1.c **** /* List of channels used by component */
 121:../Generated_Code/TU1.c **** static const uint8_t ChannelDevice[TU1_NUMBER_OF_CHANNELS] = {0x04U};
 122:../Generated_Code/TU1.c **** 
 123:../Generated_Code/TU1.c **** /* Table of channels mode / 0 - compare mode, 1 - capture mode */
 124:../Generated_Code/TU1.c **** static const uint8_t ChannelMode[TU1_NUMBER_OF_CHANNELS] = {0x01U};
 125:../Generated_Code/TU1.c **** 
 126:../Generated_Code/TU1.c **** 
 127:../Generated_Code/TU1.c **** typedef struct {
 128:../Generated_Code/TU1.c ****   LDD_TEventMask EnEvents;             /* Enable/Disable events mask */
 129:../Generated_Code/TU1.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
 130:../Generated_Code/TU1.c **** } TU1_TDeviceData;
 131:../Generated_Code/TU1.c **** 
 132:../Generated_Code/TU1.c **** typedef TU1_TDeviceData *TU1_TDeviceDataPtr; /* Pointer to the device data structure. */
 133:../Generated_Code/TU1.c **** 
 134:../Generated_Code/TU1.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 135:../Generated_Code/TU1.c **** static TU1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 136:../Generated_Code/TU1.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
 137:../Generated_Code/TU1.c **** static TU1_TDeviceDataPtr INT_TPM0__DEFAULT_RTOS_ISRPARAM;
 138:../Generated_Code/TU1.c **** 
 139:../Generated_Code/TU1.c **** #define AVAILABLE_EVENTS_MASK (LDD_TEventMask)(LDD_TIMERUNIT_ON_CHANNEL_0 | LDD_TIMERUNIT_ON_COUNTE
 140:../Generated_Code/TU1.c **** #define AVAILABLE_PIN_MASK (LDD_TPinMask)(TU1_CHANNEL_0_PIN)
 141:../Generated_Code/TU1.c **** #define LAST_CHANNEL 0x00U
 142:../Generated_Code/TU1.c **** 
 143:../Generated_Code/TU1.c **** /* Internal method prototypes */
 144:../Generated_Code/TU1.c **** /*
 145:../Generated_Code/TU1.c **** ** ===================================================================
 146:../Generated_Code/TU1.c **** **     Method      :  TU1_Init (component TimerUnit_LDD)
 147:../Generated_Code/TU1.c **** */
 148:../Generated_Code/TU1.c **** /*!
 149:../Generated_Code/TU1.c **** **     @brief
 150:../Generated_Code/TU1.c **** **         Initializes the device. Allocates memory for the device data
 151:../Generated_Code/TU1.c **** **         structure, allocates interrupt vectors and sets interrupt
 152:../Generated_Code/TU1.c **** **         priority, sets pin routing, sets timing, etc. If the
 153:../Generated_Code/TU1.c **** **         property ["Enable in init. code"] is set to "yes" value then
 154:../Generated_Code/TU1.c **** **         the device is also enabled (see the description of the
 155:../Generated_Code/TU1.c **** **         [Enable] method). In this case the [Enable] method is not
 156:../Generated_Code/TU1.c **** **         necessary and needn't to be generated. This method can be
 157:../Generated_Code/TU1.c **** **         called only once. Before the second call of Init the [Deinit]
 158:../Generated_Code/TU1.c **** **         must be called first.
 159:../Generated_Code/TU1.c **** **     @param
 160:../Generated_Code/TU1.c **** **         UserDataPtr     - Pointer to the user or
 161:../Generated_Code/TU1.c **** **                           RTOS specific data. This pointer will be
 162:../Generated_Code/TU1.c **** **                           passed as an event or callback parameter.
 163:../Generated_Code/TU1.c **** **     @return
 164:../Generated_Code/TU1.c **** **                         - Pointer to the dynamically allocated private
 165:../Generated_Code/TU1.c **** **                           structure or NULL if there was an error.
 166:../Generated_Code/TU1.c **** */
 167:../Generated_Code/TU1.c **** /* ===================================================================*/
 168:../Generated_Code/TU1.c **** LDD_TDeviceData* TU1_Init(LDD_TUserData *UserDataPtr)
 169:../Generated_Code/TU1.c **** {
  60              		.loc 1 169 0
  61              		.cfi_startproc
  62 0000 80B5     		push	{r7, lr}
  63              	.LCFI0:
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 84B0     		sub	sp, sp, #16
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 24
  70 0004 00AF     		add	r7, sp, #0
  71              	.LCFI2:
  72              		.cfi_def_cfa_register 7
  73 0006 7860     		str	r0, [r7, #4]
 170:../Generated_Code/TU1.c ****   /* Allocate device structure */
 171:../Generated_Code/TU1.c ****   TU1_TDeviceData *DeviceDataPrv;
 172:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 173:../Generated_Code/TU1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  74              		.loc 1 173 0
  75 0008 2C4B     		ldr	r3, .L3
  76 000a FB60     		str	r3, [r7, #12]
 174:../Generated_Code/TU1.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  77              		.loc 1 174 0
  78 000c FB68     		ldr	r3, [r7, #12]
  79 000e 7A68     		ldr	r2, [r7, #4]
  80 0010 5A60     		str	r2, [r3, #4]
 175:../Generated_Code/TU1.c ****   /* Interrupt vector(s) allocation */
 176:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 177:../Generated_Code/TU1.c ****   INT_TPM0__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  81              		.loc 1 177 0
  82 0012 2B4B     		ldr	r3, .L3+4
  83 0014 FA68     		ldr	r2, [r7, #12]
  84 0016 1A60     		str	r2, [r3]
 178:../Generated_Code/TU1.c ****   /* SIM_SCGC6: TPM0=1 */
 179:../Generated_Code/TU1.c ****   SIM_SCGC6 |= SIM_SCGC6_TPM0_MASK;
  85              		.loc 1 179 0
  86 0018 2A4A     		ldr	r2, .L3+8
  87 001a 2A49     		ldr	r1, .L3+8
  88 001c 2A4B     		ldr	r3, .L3+12
  89 001e CB58     		ldr	r3, [r1, r3]
  90 0020 8021     		mov	r1, #128
  91 0022 4904     		lsl	r1, r1, #17
  92 0024 1943     		orr	r1, r3
  93 0026 284B     		ldr	r3, .L3+12
  94 0028 D150     		str	r1, [r2, r3]
 180:../Generated_Code/TU1.c ****   /* TPM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 181:../Generated_Code/TU1.c ****   TPM0_SC = (TPM_SC_CMOD(0x00) | TPM_SC_PS(0x00)); /* Clear status and control register */
  95              		.loc 1 181 0
  96 002a 284B     		ldr	r3, .L3+16
  97 002c 0022     		mov	r2, #0
  98 002e 1A60     		str	r2, [r3]
 182:../Generated_Code/TU1.c ****   /* TPM0_CNT: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUN
 183:../Generated_Code/TU1.c ****   TPM0_CNT = TPM_CNT_COUNT(0x00);      /* Reset counter register */
  99              		.loc 1 183 0
 100 0030 264B     		ldr	r3, .L3+16
 101 0032 0022     		mov	r2, #0
 102 0034 5A60     		str	r2, [r3, #4]
 184:../Generated_Code/TU1.c ****   /* TPM0_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 185:../Generated_Code/TU1.c ****   TPM0_C0SC = 0x00U;                   /* Clear channel status and control register */
 103              		.loc 1 185 0
 104 0036 254B     		ldr	r3, .L3+16
 105 0038 0022     		mov	r2, #0
 106 003a DA60     		str	r2, [r3, #12]
 186:../Generated_Code/TU1.c ****   /* TPM0_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 187:../Generated_Code/TU1.c ****   TPM0_C1SC = 0x00U;                   /* Clear channel status and control register */
 107              		.loc 1 187 0
 108 003c 234B     		ldr	r3, .L3+16
 109 003e 0022     		mov	r2, #0
 110 0040 5A61     		str	r2, [r3, #20]
 188:../Generated_Code/TU1.c ****   /* TPM0_C2SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 189:../Generated_Code/TU1.c ****   TPM0_C2SC = 0x00U;                   /* Clear channel status and control register */
 111              		.loc 1 189 0
 112 0042 224B     		ldr	r3, .L3+16
 113 0044 0022     		mov	r2, #0
 114 0046 DA61     		str	r2, [r3, #28]
 190:../Generated_Code/TU1.c ****   /* TPM0_C3SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 191:../Generated_Code/TU1.c ****   TPM0_C3SC = 0x00U;                   /* Clear channel status and control register */
 115              		.loc 1 191 0
 116 0048 204B     		ldr	r3, .L3+16
 117 004a 0022     		mov	r2, #0
 118 004c 5A62     		str	r2, [r3, #36]
 192:../Generated_Code/TU1.c ****   /* TPM0_C4SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 193:../Generated_Code/TU1.c ****   TPM0_C4SC = 0x00U;                   /* Clear channel status and control register */
 119              		.loc 1 193 0
 120 004e 1F4B     		ldr	r3, .L3+16
 121 0050 0022     		mov	r2, #0
 122 0052 DA62     		str	r2, [r3, #44]
 194:../Generated_Code/TU1.c ****   /* TPM0_C5SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 195:../Generated_Code/TU1.c ****   TPM0_C5SC = 0x00U;                   /* Clear channel status and control register */
 123              		.loc 1 195 0
 124 0054 1D4B     		ldr	r3, .L3+16
 125 0056 0022     		mov	r2, #0
 126 0058 5A63     		str	r2, [r3, #52]
 196:../Generated_Code/TU1.c ****   /* TPM0_MOD: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MOD=
 197:../Generated_Code/TU1.c ****   TPM0_MOD = TPM_MOD_MOD(0xFFFF);      /* Set up modulo register */
 127              		.loc 1 197 0
 128 005a 1C4B     		ldr	r3, .L3+16
 129 005c 1C4A     		ldr	r2, .L3+20
 130 005e 9A60     		str	r2, [r3, #8]
 198:../Generated_Code/TU1.c ****   /* TPM0_C4SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 199:../Generated_Code/TU1.c ****   TPM0_C4SC = (TPM_CnSC_CHIE_MASK | TPM_CnSC_ELSB_MASK | TPM_CnSC_ELSA_MASK); /* Set up channel sta
 131              		.loc 1 199 0
 132 0060 1A4B     		ldr	r3, .L3+16
 133 0062 4C22     		mov	r2, #76
 134 0064 DA62     		str	r2, [r3, #44]
 200:../Generated_Code/TU1.c ****   /* PORTD_PCR4: ISF=0,MUX=4 */
 201:../Generated_Code/TU1.c ****   PORTD_PCR4 = (uint32_t)((PORTD_PCR4 & (uint32_t)~(uint32_t)(
 135              		.loc 1 201 0
 136 0066 1B4B     		ldr	r3, .L3+24
 137 0068 1A4A     		ldr	r2, .L3+24
 138 006a 1169     		ldr	r1, [r2, #16]
 139 006c 1A4A     		ldr	r2, .L3+28
 140 006e 0A40     		and	r2, r1
 141 0070 8021     		mov	r1, #128
 142 0072 C900     		lsl	r1, r1, #3
 143 0074 0A43     		orr	r2, r1
 144 0076 1A61     		str	r2, [r3, #16]
 202:../Generated_Code/TU1.c ****                 PORT_PCR_ISF_MASK |
 203:../Generated_Code/TU1.c ****                 PORT_PCR_MUX(0x03)
 204:../Generated_Code/TU1.c ****                )) | (uint32_t)(
 205:../Generated_Code/TU1.c ****                 PORT_PCR_MUX(0x04)
 206:../Generated_Code/TU1.c ****                ));
 207:../Generated_Code/TU1.c ****   DeviceDataPrv->EnEvents = 0x0101U;   /* Enable selected events */
 145              		.loc 1 207 0
 146 0078 FB68     		ldr	r3, [r7, #12]
 147 007a 184A     		ldr	r2, .L3+32
 148 007c 1A60     		str	r2, [r3]
 208:../Generated_Code/TU1.c ****   /* NVIC_IPR4: PRI_17=0x80 */
 209:../Generated_Code/TU1.c ****   NVIC_IPR4 = (uint32_t)((NVIC_IPR4 & (uint32_t)~(uint32_t)(
 149              		.loc 1 209 0
 150 007e 184A     		ldr	r2, .L3+36
 151 0080 1749     		ldr	r1, .L3+36
 152 0082 C423     		mov	r3, #196
 153 0084 9B00     		lsl	r3, r3, #2
 154 0086 C958     		ldr	r1, [r1, r3]
 155 0088 164B     		ldr	r3, .L3+40
 156 008a 0B40     		and	r3, r1
 157 008c 8021     		mov	r1, #128
 158 008e 0902     		lsl	r1, r1, #8
 159 0090 1943     		orr	r1, r3
 160 0092 C423     		mov	r3, #196
 161 0094 9B00     		lsl	r3, r3, #2
 162 0096 D150     		str	r1, [r2, r3]
 210:../Generated_Code/TU1.c ****                NVIC_IP_PRI_17(0x7F)
 211:../Generated_Code/TU1.c ****               )) | (uint32_t)(
 212:../Generated_Code/TU1.c ****                NVIC_IP_PRI_17(0x80)
 213:../Generated_Code/TU1.c ****               ));
 214:../Generated_Code/TU1.c ****   /* NVIC_ISER: SETENA|=0x00020000 */
 215:../Generated_Code/TU1.c ****   NVIC_ISER |= NVIC_ISER_SETENA(0x00020000);
 163              		.loc 1 215 0
 164 0098 114B     		ldr	r3, .L3+36
 165 009a 114A     		ldr	r2, .L3+36
 166 009c 1268     		ldr	r2, [r2]
 167 009e 8021     		mov	r1, #128
 168 00a0 8902     		lsl	r1, r1, #10
 169 00a2 0A43     		orr	r2, r1
 170 00a4 1A60     		str	r2, [r3]
 216:../Generated_Code/TU1.c ****   /* TPM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 217:../Generated_Code/TU1.c ****   TPM0_SC = (TPM_SC_TOIE_MASK | TPM_SC_CMOD(0x01) | TPM_SC_PS(0x03)); /* Set up status and control 
 171              		.loc 1 217 0
 172 00a6 094B     		ldr	r3, .L3+16
 173 00a8 4B22     		mov	r2, #75
 174 00aa 1A60     		str	r2, [r3]
 218:../Generated_Code/TU1.c ****   /* Registration of the device structure */
 219:../Generated_Code/TU1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU1_ID,DeviceDataPrv);
 175              		.loc 1 219 0
 176 00ac 0E4B     		ldr	r3, .L3+44
 177 00ae FA68     		ldr	r2, [r7, #12]
 178 00b0 5A60     		str	r2, [r3, #4]
 220:../Generated_Code/TU1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
 179              		.loc 1 220 0
 180 00b2 FB68     		ldr	r3, [r7, #12]
 221:../Generated_Code/TU1.c **** }
 181              		.loc 1 221 0
 182 00b4 181C     		mov	r0, r3
 183 00b6 BD46     		mov	sp, r7
 184 00b8 04B0     		add	sp, sp, #16
 185              		@ sp needed for prologue
 186 00ba 80BD     		pop	{r7, pc}
 187              	.L4:
 188              		.align	2
 189              	.L3:
 190 00bc 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 191 00c0 00000000 		.word	INT_TPM0__DEFAULT_RTOS_ISRPARAM
 192 00c4 00700440 		.word	1074032640
 193 00c8 3C100000 		.word	4156
 194 00cc 00800340 		.word	1073971200
 195 00d0 FFFF0000 		.word	65535
 196 00d4 00C00440 		.word	1074053120
 197 00d8 FFF8FFFE 		.word	-16779009
 198 00dc 01010000 		.word	257
 199 00e0 00E100E0 		.word	-536813312
 200 00e4 FF00FFFF 		.word	-65281
 201 00e8 00000000 		.word	PE_LDD_DeviceDataList
 202              		.cfi_endproc
 203              	.LFE0:
 205              		.section	.text.TU1_Deinit,"ax",%progbits
 206              		.align	2
 207              		.global	TU1_Deinit
 208              		.code	16
 209              		.thumb_func
 211              	TU1_Deinit:
 212              	.LFB1:
 222:../Generated_Code/TU1.c **** 
 223:../Generated_Code/TU1.c **** /*
 224:../Generated_Code/TU1.c **** ** ===================================================================
 225:../Generated_Code/TU1.c **** **     Method      :  TU1_Deinit (component TimerUnit_LDD)
 226:../Generated_Code/TU1.c **** */
 227:../Generated_Code/TU1.c **** /*!
 228:../Generated_Code/TU1.c **** **     @brief
 229:../Generated_Code/TU1.c **** **         Deinitializes the device. Switches off the device, frees the
 230:../Generated_Code/TU1.c **** **         device data structure memory, interrupts vectors, etc.
 231:../Generated_Code/TU1.c **** **     @param
 232:../Generated_Code/TU1.c **** **         DeviceDataPtr   - Device data structure
 233:../Generated_Code/TU1.c **** **                           pointer returned by Init method
 234:../Generated_Code/TU1.c **** */
 235:../Generated_Code/TU1.c **** /* ===================================================================*/
 236:../Generated_Code/TU1.c **** void TU1_Deinit(LDD_TDeviceData *DeviceDataPtr)
 237:../Generated_Code/TU1.c **** {
 213              		.loc 1 237 0
 214              		.cfi_startproc
 215 0000 80B5     		push	{r7, lr}
 216              	.LCFI3:
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 7, -8
 219              		.cfi_offset 14, -4
 220 0002 84B0     		sub	sp, sp, #16
 221              	.LCFI4:
 222              		.cfi_def_cfa_offset 24
 223 0004 00AF     		add	r7, sp, #0
 224              	.LCFI5:
 225              		.cfi_def_cfa_register 7
 226 0006 7860     		str	r0, [r7, #4]
 238:../Generated_Code/TU1.c ****   TU1_TDeviceData *DeviceDataPrv = (TU1_TDeviceData *)DeviceDataPtr;
 227              		.loc 1 238 0
 228 0008 7B68     		ldr	r3, [r7, #4]
 229 000a FB60     		str	r3, [r7, #12]
 239:../Generated_Code/TU1.c **** 
 240:../Generated_Code/TU1.c ****   (void)DeviceDataPrv;
 241:../Generated_Code/TU1.c ****   TPM_PDD_SelectPrescalerSource(TPM0_BASE_PTR, TPM_PDD_DISABLED);
 230              		.loc 1 241 0
 231 000c 054B     		ldr	r3, .L6
 232 000e 054A     		ldr	r2, .L6
 233 0010 1268     		ldr	r2, [r2]
 234 0012 9821     		mov	r1, #152
 235 0014 8A43     		bic	r2, r1
 236 0016 1A60     		str	r2, [r3]
 242:../Generated_Code/TU1.c ****   /* Interrupt vector(s) deallocation */
 243:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} Restore interrupt vector: IVT is static, no code is generated */
 244:../Generated_Code/TU1.c ****   /* Unregistration of the device structure */
 245:../Generated_Code/TU1.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_TU1_ID);
 237              		.loc 1 245 0
 238 0018 034B     		ldr	r3, .L6+4
 239 001a 0022     		mov	r2, #0
 240 001c 5A60     		str	r2, [r3, #4]
 246:../Generated_Code/TU1.c ****   /* Deallocation of the device structure */
 247:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 248:../Generated_Code/TU1.c **** }
 241              		.loc 1 248 0
 242 001e BD46     		mov	sp, r7
 243 0020 04B0     		add	sp, sp, #16
 244              		@ sp needed for prologue
 245 0022 80BD     		pop	{r7, pc}
 246              	.L7:
 247              		.align	2
 248              	.L6:
 249 0024 00800340 		.word	1073971200
 250 0028 00000000 		.word	PE_LDD_DeviceDataList
 251              		.cfi_endproc
 252              	.LFE1:
 254              		.section	.text.TU1_ResetCounter,"ax",%progbits
 255              		.align	2
 256              		.global	TU1_ResetCounter
 257              		.code	16
 258              		.thumb_func
 260              	TU1_ResetCounter:
 261              	.LFB2:
 249:../Generated_Code/TU1.c **** 
 250:../Generated_Code/TU1.c **** /*
 251:../Generated_Code/TU1.c **** ** ===================================================================
 252:../Generated_Code/TU1.c **** **     Method      :  TU1_ResetCounter (component TimerUnit_LDD)
 253:../Generated_Code/TU1.c **** */
 254:../Generated_Code/TU1.c **** /*!
 255:../Generated_Code/TU1.c **** **     @brief
 256:../Generated_Code/TU1.c **** **         Resets counter. If counter is counting up then it is set to
 257:../Generated_Code/TU1.c **** **         zero. If counter is counting down then counter is updated to
 258:../Generated_Code/TU1.c **** **         the reload value.
 259:../Generated_Code/TU1.c **** **         The method is not available if HW doesn't allow resetting of
 260:../Generated_Code/TU1.c **** **         the counter.
 261:../Generated_Code/TU1.c **** **     @param
 262:../Generated_Code/TU1.c **** **         DeviceDataPtr   - Device data structure
 263:../Generated_Code/TU1.c **** **                           pointer returned by [Init] method.
 264:../Generated_Code/TU1.c **** **     @return
 265:../Generated_Code/TU1.c **** **                         - Error code, possible codes:
 266:../Generated_Code/TU1.c **** **                           ERR_OK - OK 
 267:../Generated_Code/TU1.c **** **                           ERR_SPEED - The component does not work in
 268:../Generated_Code/TU1.c **** **                           the active clock configuration
 269:../Generated_Code/TU1.c **** */
 270:../Generated_Code/TU1.c **** /* ===================================================================*/
 271:../Generated_Code/TU1.c **** LDD_TError TU1_ResetCounter(LDD_TDeviceData *DeviceDataPtr)
 272:../Generated_Code/TU1.c **** {
 262              		.loc 1 272 0
 263              		.cfi_startproc
 264 0000 80B5     		push	{r7, lr}
 265              	.LCFI6:
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 7, -8
 268              		.cfi_offset 14, -4
 269 0002 82B0     		sub	sp, sp, #8
 270              	.LCFI7:
 271              		.cfi_def_cfa_offset 16
 272 0004 00AF     		add	r7, sp, #0
 273              	.LCFI8:
 274              		.cfi_def_cfa_register 7
 275 0006 7860     		str	r0, [r7, #4]
 273:../Generated_Code/TU1.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 274:../Generated_Code/TU1.c ****   TPM_PDD_InitializeCounter(TPM0_BASE_PTR);
 276              		.loc 1 274 0
 277 0008 034B     		ldr	r3, .L10
 278 000a 0022     		mov	r2, #0
 279 000c 5A60     		str	r2, [r3, #4]
 275:../Generated_Code/TU1.c ****   return ERR_OK;                       /* OK */
 280              		.loc 1 275 0
 281 000e 0023     		mov	r3, #0
 276:../Generated_Code/TU1.c **** }
 282              		.loc 1 276 0
 283 0010 181C     		mov	r0, r3
 284 0012 BD46     		mov	sp, r7
 285 0014 02B0     		add	sp, sp, #8
 286              		@ sp needed for prologue
 287 0016 80BD     		pop	{r7, pc}
 288              	.L11:
 289              		.align	2
 290              	.L10:
 291 0018 00800340 		.word	1073971200
 292              		.cfi_endproc
 293              	.LFE2:
 295              		.section	.text.TU1_GetCaptureValue,"ax",%progbits
 296              		.align	2
 297              		.global	TU1_GetCaptureValue
 298              		.code	16
 299              		.thumb_func
 301              	TU1_GetCaptureValue:
 302              	.LFB3:
 277:../Generated_Code/TU1.c **** 
 278:../Generated_Code/TU1.c **** /*
 279:../Generated_Code/TU1.c **** ** ===================================================================
 280:../Generated_Code/TU1.c **** **     Method      :  TU1_GetCaptureValue (component TimerUnit_LDD)
 281:../Generated_Code/TU1.c **** */
 282:../Generated_Code/TU1.c **** /*!
 283:../Generated_Code/TU1.c **** **     @brief
 284:../Generated_Code/TU1.c **** **         Returns the content of capture register specified by the
 285:../Generated_Code/TU1.c **** **         parameter ChannelIdx. This method is available when at least
 286:../Generated_Code/TU1.c **** **         one channel is configured.
 287:../Generated_Code/TU1.c **** **     @param
 288:../Generated_Code/TU1.c **** **         DeviceDataPtr   - Device data structure
 289:../Generated_Code/TU1.c **** **                           pointer returned by [Init] method.
 290:../Generated_Code/TU1.c **** **     @param
 291:../Generated_Code/TU1.c **** **         ChannelIdx      - Index of the component
 292:../Generated_Code/TU1.c **** **                           channel.
 293:../Generated_Code/TU1.c **** **     @param
 294:../Generated_Code/TU1.c **** **         ValuePtr        - Pointer to return value of the
 295:../Generated_Code/TU1.c **** **                           capture register.
 296:../Generated_Code/TU1.c **** **     @return
 297:../Generated_Code/TU1.c **** **                         - Error code, possible codes:
 298:../Generated_Code/TU1.c **** **                           ERR_OK - OK 
 299:../Generated_Code/TU1.c **** **                           ERR_PARAM_INDEX - ChannelIdx parameter is
 300:../Generated_Code/TU1.c **** **                           out of possible range
 301:../Generated_Code/TU1.c **** **                           ERR_NOTAVAIL -  The capture mode is not
 302:../Generated_Code/TU1.c **** **                           selected for selected channel.
 303:../Generated_Code/TU1.c **** **                           ERR_SPEED - The component does not work in
 304:../Generated_Code/TU1.c **** **                           the active clock configuration
 305:../Generated_Code/TU1.c **** */
 306:../Generated_Code/TU1.c **** /* ===================================================================*/
 307:../Generated_Code/TU1.c **** LDD_TError TU1_GetCaptureValue(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, TU1_TValueType *
 308:../Generated_Code/TU1.c **** {
 303              		.loc 1 308 0
 304              		.cfi_startproc
 305 0000 80B5     		push	{r7, lr}
 306              	.LCFI9:
 307              		.cfi_def_cfa_offset 8
 308              		.cfi_offset 7, -8
 309              		.cfi_offset 14, -4
 310 0002 84B0     		sub	sp, sp, #16
 311              	.LCFI10:
 312              		.cfi_def_cfa_offset 24
 313 0004 00AF     		add	r7, sp, #0
 314              	.LCFI11:
 315              		.cfi_def_cfa_register 7
 316 0006 F860     		str	r0, [r7, #12]
 317 0008 7A60     		str	r2, [r7, #4]
 318 000a 3B1C     		mov	r3, r7
 319 000c 0B33     		add	r3, r3, #11
 320 000e 0A1C     		add	r2, r1, #0
 321 0010 1A70     		strb	r2, [r3]
 309:../Generated_Code/TU1.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 310:../Generated_Code/TU1.c ****   /* Parameter test - this test can be disabled by setting the "Ignore range checking"
 311:../Generated_Code/TU1.c ****      property to the "yes" value in the "Configuration inspector" */
 312:../Generated_Code/TU1.c ****   if (ChannelIdx > LAST_CHANNEL) {     /* Is the channel index out of range? */
 322              		.loc 1 312 0
 323 0012 3B1C     		mov	r3, r7
 324 0014 0B33     		add	r3, r3, #11
 325 0016 1B78     		ldrb	r3, [r3]
 326 0018 002B     		cmp	r3, #0
 327 001a 01D0     		beq	.L13
 313:../Generated_Code/TU1.c ****     return ERR_PARAM_INDEX;            /* If yes then error */
 328              		.loc 1 313 0
 329 001c 8223     		mov	r3, #130
 330 001e 15E0     		b	.L14
 331              	.L13:
 314:../Generated_Code/TU1.c ****   }
 315:../Generated_Code/TU1.c ****   if ((ChannelMode[ChannelIdx]) != 1u) { /* Is the channel in capture mode? */
 332              		.loc 1 315 0
 333 0020 3B1C     		mov	r3, r7
 334 0022 0B33     		add	r3, r3, #11
 335 0024 1B78     		ldrb	r3, [r3]
 336 0026 0B4A     		ldr	r2, .L16
 337 0028 D35C     		ldrb	r3, [r2, r3]
 338 002a 012B     		cmp	r3, #1
 339 002c 01D0     		beq	.L15
 316:../Generated_Code/TU1.c ****     return ERR_NOTAVAIL;               /* If not then error */
 340              		.loc 1 316 0
 341 002e 0923     		mov	r3, #9
 342 0030 0CE0     		b	.L14
 343              	.L15:
 317:../Generated_Code/TU1.c ****   }
 318:../Generated_Code/TU1.c ****   *ValuePtr = (TU1_TValueType)(TPM_PDD_ReadChannelValueReg(TPM0_BASE_PTR, ChannelDevice[ChannelIdx]
 344              		.loc 1 318 0
 345 0032 094A     		ldr	r2, .L16+4
 346 0034 3B1C     		mov	r3, r7
 347 0036 0B33     		add	r3, r3, #11
 348 0038 1B78     		ldrb	r3, [r3]
 349 003a 0849     		ldr	r1, .L16+8
 350 003c CB5C     		ldrb	r3, [r1, r3]
 351 003e 0133     		add	r3, r3, #1
 352 0040 DB00     		lsl	r3, r3, #3
 353 0042 D318     		add	r3, r2, r3
 354 0044 9A68     		ldr	r2, [r3, #8]
 355 0046 7B68     		ldr	r3, [r7, #4]
 356 0048 1A60     		str	r2, [r3]
 319:../Generated_Code/TU1.c ****   return ERR_OK;                       /* OK */
 357              		.loc 1 319 0
 358 004a 0023     		mov	r3, #0
 359              	.L14:
 320:../Generated_Code/TU1.c **** }
 360              		.loc 1 320 0
 361 004c 181C     		mov	r0, r3
 362 004e BD46     		mov	sp, r7
 363 0050 04B0     		add	sp, sp, #16
 364              		@ sp needed for prologue
 365 0052 80BD     		pop	{r7, pc}
 366              	.L17:
 367              		.align	2
 368              	.L16:
 369 0054 00000000 		.word	ChannelMode
 370 0058 00800340 		.word	1073971200
 371 005c 00000000 		.word	ChannelDevice
 372              		.cfi_endproc
 373              	.LFE3:
 375              		.section	.text.TU1_Interrupt,"ax",%progbits
 376              		.align	2
 377              		.global	TU1_Interrupt
 378              		.code	16
 379              		.thumb_func
 381              	TU1_Interrupt:
 382              	.LFB4:
 321:../Generated_Code/TU1.c **** 
 322:../Generated_Code/TU1.c **** /*
 323:../Generated_Code/TU1.c **** ** ===================================================================
 324:../Generated_Code/TU1.c **** **     Method      :  TU1_Interrupt (component TimerUnit_LDD)
 325:../Generated_Code/TU1.c **** **
 326:../Generated_Code/TU1.c **** **     Description :
 327:../Generated_Code/TU1.c **** **         The method services the interrupt of the selected peripheral(s)
 328:../Generated_Code/TU1.c **** **         and eventually invokes event(s) of the component.
 329:../Generated_Code/TU1.c **** **         This method is internal. It is used by Processor Expert only.
 330:../Generated_Code/TU1.c **** ** ===================================================================
 331:../Generated_Code/TU1.c **** */
 332:../Generated_Code/TU1.c **** PE_ISR(TU1_Interrupt)
 333:../Generated_Code/TU1.c **** {
 383              		.loc 1 333 0
 384              		.cfi_startproc
 385 0000 80B5     		push	{r7, lr}
 386              	.LCFI12:
 387              		.cfi_def_cfa_offset 8
 388              		.cfi_offset 7, -8
 389              		.cfi_offset 14, -4
 390 0002 82B0     		sub	sp, sp, #8
 391              	.LCFI13:
 392              		.cfi_def_cfa_offset 16
 393 0004 00AF     		add	r7, sp, #0
 394              	.LCFI14:
 395              		.cfi_def_cfa_register 7
 334:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
 335:../Generated_Code/TU1.c ****   TU1_TDeviceDataPtr DeviceDataPrv = INT_TPM0__DEFAULT_RTOS_ISRPARAM;
 396              		.loc 1 335 0
 397 0006 274B     		ldr	r3, .L23
 398 0008 1B68     		ldr	r3, [r3]
 399 000a 3B60     		str	r3, [r7]
 336:../Generated_Code/TU1.c **** 
 337:../Generated_Code/TU1.c ****   LDD_TEventMask State = 0U;
 400              		.loc 1 337 0
 401 000c 0023     		mov	r3, #0
 402 000e 7B60     		str	r3, [r7, #4]
 338:../Generated_Code/TU1.c **** 
 339:../Generated_Code/TU1.c ****   if ((TPM_PDD_GetOverflowInterruptFlag(TPM0_BASE_PTR)) != 0U) { /* Is the overflow interrupt flag 
 403              		.loc 1 339 0
 404 0010 254B     		ldr	r3, .L23+4
 405 0012 1A68     		ldr	r2, [r3]
 406 0014 8023     		mov	r3, #128
 407 0016 1340     		and	r3, r2
 408 0018 04D0     		beq	.L19
 340:../Generated_Code/TU1.c ****     State |= LDD_TIMERUNIT_ON_COUNTER_RESTART; /* and set mask */
 409              		.loc 1 340 0
 410 001a 7B68     		ldr	r3, [r7, #4]
 411 001c 8022     		mov	r2, #128
 412 001e 5200     		lsl	r2, r2, #1
 413 0020 1343     		orr	r3, r2
 414 0022 7B60     		str	r3, [r7, #4]
 415              	.L19:
 341:../Generated_Code/TU1.c ****   }
 342:../Generated_Code/TU1.c ****   if ((TPM_PDD_GetChannelInterruptFlag(TPM0_BASE_PTR, ChannelDevice[0])) != 0U) { /* Is the channel
 416              		.loc 1 342 0
 417 0024 204A     		ldr	r2, .L23+4
 418 0026 214B     		ldr	r3, .L23+8
 419 0028 1B78     		ldrb	r3, [r3]
 420 002a 0133     		add	r3, r3, #1
 421 002c DB00     		lsl	r3, r3, #3
 422 002e D318     		add	r3, r2, r3
 423 0030 5A68     		ldr	r2, [r3, #4]
 424 0032 8023     		mov	r3, #128
 425 0034 1340     		and	r3, r2
 426 0036 03D0     		beq	.L20
 343:../Generated_Code/TU1.c ****     State |= LDD_TIMERUNIT_ON_CHANNEL_0; /* and set mask */
 427              		.loc 1 343 0
 428 0038 7B68     		ldr	r3, [r7, #4]
 429 003a 0122     		mov	r2, #1
 430 003c 1343     		orr	r3, r2
 431 003e 7B60     		str	r3, [r7, #4]
 432              	.L20:
 344:../Generated_Code/TU1.c ****   }
 345:../Generated_Code/TU1.c ****   State &= DeviceDataPrv->EnEvents;    /* Handle only enabled interrupts */
 433              		.loc 1 345 0
 434 0040 3B68     		ldr	r3, [r7]
 435 0042 1A68     		ldr	r2, [r3]
 436 0044 7B68     		ldr	r3, [r7, #4]
 437 0046 1340     		and	r3, r2
 438 0048 7B60     		str	r3, [r7, #4]
 346:../Generated_Code/TU1.c ****   if (State & LDD_TIMERUNIT_ON_COUNTER_RESTART) { /* Is the overflow interrupt flag pending? */
 439              		.loc 1 346 0
 440 004a 7A68     		ldr	r2, [r7, #4]
 441 004c 8023     		mov	r3, #128
 442 004e 5B00     		lsl	r3, r3, #1
 443 0050 1340     		and	r3, r2
 444 0052 0AD0     		beq	.L21
 347:../Generated_Code/TU1.c ****     TPM_PDD_ClearOverflowInterruptFlag(TPM0_BASE_PTR); /* Clear flag */
 445              		.loc 1 347 0
 446 0054 144B     		ldr	r3, .L23+4
 447 0056 144A     		ldr	r2, .L23+4
 448 0058 1268     		ldr	r2, [r2]
 449 005a 8021     		mov	r1, #128
 450 005c 0A43     		orr	r2, r1
 451 005e 1A60     		str	r2, [r3]
 348:../Generated_Code/TU1.c ****     TU1_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
 452              		.loc 1 348 0
 453 0060 3B68     		ldr	r3, [r7]
 454 0062 5B68     		ldr	r3, [r3, #4]
 455 0064 181C     		mov	r0, r3
 456 0066 FFF7FEFF 		bl	TU1_OnCounterRestart
 457              	.L21:
 349:../Generated_Code/TU1.c ****   }
 350:../Generated_Code/TU1.c ****   if (State & LDD_TIMERUNIT_ON_CHANNEL_0) { /* Is the channel 0 interrupt flag pending? */
 458              		.loc 1 350 0
 459 006a 7A68     		ldr	r2, [r7, #4]
 460 006c 0123     		mov	r3, #1
 461 006e 1340     		and	r3, r2
 462 0070 15D0     		beq	.L18
 351:../Generated_Code/TU1.c ****     TPM_PDD_ClearChannelInterruptFlag(TPM0_BASE_PTR, ChannelDevice[0]); /* Clear flag */
 463              		.loc 1 351 0
 464 0072 0D49     		ldr	r1, .L23+4
 465 0074 0D4B     		ldr	r3, .L23+8
 466 0076 1B78     		ldrb	r3, [r3]
 467 0078 181C     		mov	r0, r3
 468 007a 0B4A     		ldr	r2, .L23+4
 469 007c 0B4B     		ldr	r3, .L23+8
 470 007e 1B78     		ldrb	r3, [r3]
 471 0080 0133     		add	r3, r3, #1
 472 0082 DB00     		lsl	r3, r3, #3
 473 0084 D318     		add	r3, r2, r3
 474 0086 5B68     		ldr	r3, [r3, #4]
 475 0088 8022     		mov	r2, #128
 476 008a 1A43     		orr	r2, r3
 477 008c 431C     		add	r3, r0, #1
 478 008e DB00     		lsl	r3, r3, #3
 479 0090 CB18     		add	r3, r1, r3
 480 0092 5A60     		str	r2, [r3, #4]
 352:../Generated_Code/TU1.c ****     TU1_OnChannel0(DeviceDataPrv->UserDataPtr); /* Invoke OnChannel0 event */
 481              		.loc 1 352 0
 482 0094 3B68     		ldr	r3, [r7]
 483 0096 5B68     		ldr	r3, [r3, #4]
 484 0098 181C     		mov	r0, r3
 485 009a FFF7FEFF 		bl	TU1_OnChannel0
 486              	.L18:
 353:../Generated_Code/TU1.c ****   }
 354:../Generated_Code/TU1.c **** }
 487              		.loc 1 354 0
 488 009e BD46     		mov	sp, r7
 489 00a0 02B0     		add	sp, sp, #8
 490              		@ sp needed for prologue
 491 00a2 80BD     		pop	{r7, pc}
 492              	.L24:
 493              		.align	2
 494              	.L23:
 495 00a4 00000000 		.word	INT_TPM0__DEFAULT_RTOS_ISRPARAM
 496 00a8 00800340 		.word	1073971200
 497 00ac 00000000 		.word	ChannelDevice
 498              		.cfi_endproc
 499              	.LFE4:
 501              		.text
 502              	.Letext0:
 503              		.file 2 "D:/Freescale/CodeWarrior11/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 504              		.file 3 "C:/Users/David/Desktop/DronePrototype/Generated_Code/PE_Types.h"
 505              		.file 4 "C:/Users/David/Desktop/DronePrototype/Project_Headers/MKL25Z4.h"
 506              		.file 5 "C:/Users/David/Desktop/DronePrototype/Generated_Code/TU1.h"
 507              		.file 6 "C:/Users/David/Desktop/DronePrototype/Project_Headers/global.h"
 508              		.file 7 "C:/Users/David/Desktop/DronePrototype/Project_Headers/Acc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TU1.c
                            *COM*:00000001 AccReady
                            *COM*:00000001 PrintReady
                            *COM*:00000006 AccData
                            *COM*:00000002 Xout_14_bit
                            *COM*:00000002 Yout_14_bit
                            *COM*:00000002 Zout_14_bit
                            *COM*:00000004 Zout_g
                            *COM*:00000001 Xoffset
                            *COM*:00000001 Yoffset
                            *COM*:00000001 Zoffset
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:28     .rodata.ChannelDevice:00000000 $d
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:31     .rodata.ChannelDevice:00000000 ChannelDevice
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:34     .rodata.ChannelMode:00000000 $d
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:37     .rodata.ChannelMode:00000000 ChannelMode
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:40     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:43     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:46     .bss.INT_TPM0__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:49     .bss.INT_TPM0__DEFAULT_RTOS_ISRPARAM:00000000 INT_TPM0__DEFAULT_RTOS_ISRPARAM
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:52     .text.TU1_Init:00000000 $t
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:57     .text.TU1_Init:00000000 TU1_Init
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:190    .text.TU1_Init:000000bc $d
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:206    .text.TU1_Deinit:00000000 $t
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:211    .text.TU1_Deinit:00000000 TU1_Deinit
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:249    .text.TU1_Deinit:00000024 $d
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:255    .text.TU1_ResetCounter:00000000 $t
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:260    .text.TU1_ResetCounter:00000000 TU1_ResetCounter
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:291    .text.TU1_ResetCounter:00000018 $d
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:296    .text.TU1_GetCaptureValue:00000000 $t
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:301    .text.TU1_GetCaptureValue:00000000 TU1_GetCaptureValue
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:369    .text.TU1_GetCaptureValue:00000054 $d
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:376    .text.TU1_Interrupt:00000000 $t
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:381    .text.TU1_Interrupt:00000000 TU1_Interrupt
C:\Users\David\AppData\Local\Temp\ccBDThXw.s:495    .text.TU1_Interrupt:000000a4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
TU1_OnCounterRestart
TU1_OnChannel0
