   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ProcessorExpert.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	AccReady,1,1
  18              		.comm	PrintReady,1,1
  19              		.comm	AccData,6,4
  20              		.comm	Xout_14_bit,2,2
  21              		.comm	Yout_14_bit,2,2
  22              		.comm	Zout_14_bit,2,2
  23              		.comm	Zout_g,4,4
  24              		.comm	Xoffset,1,1
  25              		.comm	Yoffset,1,1
  26              		.comm	Zoffset,1,1
  27              		.comm	Input_g,8,4
  28              		.global	Target_g
  29              		.section	.bss.Target_g,"aw",%nobits
  30              		.align	2
  33              	Target_g:
  34 0000 00000000 		.space	8
  34      00000000 
  35              		.comm	Output_pwm,16,4
  36              		.comm	XaxisA,72,4
  37              		.comm	XaxisB,72,4
  38              		.comm	YaxisA,72,4
  39              		.comm	YaxisB,72,4
  40              		.comm	cm,2,2
  41              		.global	cm_to_pwm
  42              		.section	.data.cm_to_pwm,"aw",%progbits
  43              		.align	1
  46              	cm_to_pwm:
  47 0000 0500     		.short	5
  48              		.section	.text.Measure_Distance,"ax",%progbits
  49              		.align	2
  50              		.global	Measure_Distance
  51              		.code	16
  52              		.thumb_func
  54              	Measure_Distance:
  55              	.LFB0:
  56              		.file 1 "../Sources/ProcessorExpert.c"
   1:../Sources/ProcessorExpert.c **** /* Including needed modules to compile this module/procedure */
   2:../Sources/ProcessorExpert.c **** #include "global.h"
   3:../Sources/ProcessorExpert.c **** #include <MKL25Z4.h>
   4:../Sources/ProcessorExpert.c **** #include "Cpu.h"
   5:../Sources/ProcessorExpert.c **** #include "Events.h"
   6:../Sources/ProcessorExpert.c **** #include "WAIT1.h"
   7:../Sources/ProcessorExpert.c **** #include "TRIG.h"
   8:../Sources/ProcessorExpert.c **** #include "LEDR.h"
   9:../Sources/ProcessorExpert.c **** #include "LEDpin1.h"
  10:../Sources/ProcessorExpert.c **** #include "BitIoLdd1.h"
  11:../Sources/ProcessorExpert.c **** #include "LEDG.h"
  12:../Sources/ProcessorExpert.c **** #include "LEDpin2.h"
  13:../Sources/ProcessorExpert.c **** #include "BitIoLdd2.h"
  14:../Sources/ProcessorExpert.c **** #include "Acc.h"
  15:../Sources/ProcessorExpert.c **** #include "ExtIntLdd1.h"
  16:../Sources/ProcessorExpert.c **** #include "ST1.h"
  17:../Sources/ProcessorExpert.c **** #include "LEDB.h"
  18:../Sources/ProcessorExpert.c **** #include "LEDpin3.h"
  19:../Sources/ProcessorExpert.c **** #include "BitIoLdd3.h"
  20:../Sources/ProcessorExpert.c **** #include "TU1.h"
  21:../Sources/ProcessorExpert.c **** #include "MCUC1.h"
  22:../Sources/ProcessorExpert.c **** #include "UTIL1.h"
  23:../Sources/ProcessorExpert.c **** 
  24:../Sources/ProcessorExpert.c **** /* Including shared modules, which are used for whole project */
  25:../Sources/ProcessorExpert.c **** #include "PE_Types.h"
  26:../Sources/ProcessorExpert.c **** #include "PE_Error.h"
  27:../Sources/ProcessorExpert.c **** #include "PE_Const.h"
  28:../Sources/ProcessorExpert.c **** #include "IO_Map.h"
  29:../Sources/ProcessorExpert.c **** 
  30:../Sources/ProcessorExpert.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  31:../Sources/ProcessorExpert.c **** #include "Ultrasonic.h"
  32:../Sources/ProcessorExpert.c **** #include "ConsoleIO.h"
  33:../Sources/ProcessorExpert.c **** #include "derivative.h" /* include peripheral declarations */
  34:../Sources/ProcessorExpert.c **** 
  35:../Sources/ProcessorExpert.c **** #include "pwm.h"
  36:../Sources/ProcessorExpert.c **** #include "PID.h"
  37:../Sources/ProcessorExpert.c **** #include "acc.h"
  38:../Sources/ProcessorExpert.c **** #include <stdio.h>
  39:../Sources/ProcessorExpert.c **** #include <stdlib.h>
  40:../Sources/ProcessorExpert.c **** #include <string.h>
  41:../Sources/ProcessorExpert.c **** 
  42:../Sources/ProcessorExpert.c **** /******************************************************************************
  43:../Sources/ProcessorExpert.c **** * Pin assigment MKL25Z128
  44:../Sources/ProcessorExpert.c **** ******************************************************************************/
  45:../Sources/ProcessorExpert.c **** 
  46:../Sources/ProcessorExpert.c **** /*
  47:../Sources/ProcessorExpert.c **** 	* MOTORS
  48:../Sources/ProcessorExpert.c **** 	* Y:PWMA - PTB0
  49:../Sources/ProcessorExpert.c **** 	* Y:PWMB - PTB1
  50:../Sources/ProcessorExpert.c **** 	* X:PWMA - PTB2
  51:../Sources/ProcessorExpert.c **** 	* X:PWMB - PTB3
  52:../Sources/ProcessorExpert.c **** 	* AIN1 - PTC2
  53:../Sources/ProcessorExpert.c **** 	* AIN2 - PTE29
  54:../Sources/ProcessorExpert.c **** 	* STBY - PTE20
  55:../Sources/ProcessorExpert.c **** 	* BIN1 - PTE21
  56:../Sources/ProcessorExpert.c **** 	* BIN2 - PTE22
  57:../Sources/ProcessorExpert.c **** 	* 
  58:../Sources/ProcessorExpert.c **** 	* ACCELEROMETER
  59:../Sources/ProcessorExpert.c **** 	* PTA14 - Interrupt Acc
  60:../Sources/ProcessorExpert.c **** 	* PTE24 - I2C Acc
  61:../Sources/ProcessorExpert.c **** 	* PTE25 - I2C Acc
  62:../Sources/ProcessorExpert.c **** 	* 
  63:../Sources/ProcessorExpert.c **** 	* LED
  64:../Sources/ProcessorExpert.c **** 	* PTB18 - Red LED
  65:../Sources/ProcessorExpert.c **** 	* PTB19 - Green LED
  66:../Sources/ProcessorExpert.c **** 	* PTD1 - Blue LED
  67:../Sources/ProcessorExpert.c **** 	* 
  68:../Sources/ProcessorExpert.c **** 	* PRINTF
  69:../Sources/ProcessorExpert.c **** 	* PTA1 - UART 
  70:../Sources/ProcessorExpert.c **** 	* PTA2 - UART
  71:../Sources/ProcessorExpert.c **** 	* 
  72:../Sources/ProcessorExpert.c **** 	* ULTRASONIC SENSOR
  73:../Sources/ProcessorExpert.c **** 	* PTA12 - TRIGGER 
  74:../Sources/ProcessorExpert.c **** 	* PTD4 - ECHO
  75:../Sources/ProcessorExpert.c **** 	*/
  76:../Sources/ProcessorExpert.c **** 
  77:../Sources/ProcessorExpert.c **** Axis2D Input_g; 
  78:../Sources/ProcessorExpert.c **** Axis2D Target_g = {0.0,0.0};
  79:../Sources/ProcessorExpert.c **** Motors Output_pwm;
  80:../Sources/ProcessorExpert.c **** PID XaxisA, XaxisB, YaxisA, YaxisB;
  81:../Sources/ProcessorExpert.c **** 
  82:../Sources/ProcessorExpert.c **** uint16_t cm;
  83:../Sources/ProcessorExpert.c **** uint16_t cm_to_pwm = 2000/400;
  84:../Sources/ProcessorExpert.c **** 
  85:../Sources/ProcessorExpert.c **** 
  86:../Sources/ProcessorExpert.c **** 
  87:../Sources/ProcessorExpert.c **** void Measure_Distance(void) {
  57              		.loc 1 87 0
  58              		.cfi_startproc
  59 0000 90B5     		push	{r4, r7, lr}
  60              	.LCFI0:
  61              		.cfi_def_cfa_offset 12
  62              		.cfi_offset 4, -12
  63              		.cfi_offset 7, -8
  64              		.cfi_offset 14, -4
  65 0002 83B0     		sub	sp, sp, #12
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 24
  68 0004 00AF     		add	r7, sp, #0
  69              	.LCFI2:
  70              		.cfi_def_cfa_register 7
  88:../Sources/ProcessorExpert.c ****   uint16_t us;
  89:../Sources/ProcessorExpert.c **** 
  90:../Sources/ProcessorExpert.c ****   us = US_Measure_us();
  71              		.loc 1 90 0
  72 0006 BC1D     		add	r4, r7, #6
  73 0008 FFF7FEFF 		bl	US_Measure_us
  74 000c 031C     		mov	r3, r0
  75 000e 2380     		strh	r3, [r4]
  91:../Sources/ProcessorExpert.c ****   //printf("Distancia en us: %u\r\n", us);
  92:../Sources/ProcessorExpert.c **** 
  93:../Sources/ProcessorExpert.c ****   cm = US_usToCentimeters(us, 22);
  76              		.loc 1 93 0
  77 0010 BB1D     		add	r3, r7, #6
  78 0012 1B88     		ldrh	r3, [r3]
  79 0014 181C     		mov	r0, r3
  80 0016 1621     		mov	r1, #22
  81 0018 FFF7FEFF 		bl	US_usToCentimeters
  82 001c 031C     		mov	r3, r0
  83 001e 1A1C     		mov	r2, r3
  84 0020 1A4B     		ldr	r3, .L8
  85 0022 1A80     		strh	r2, [r3]
  94:../Sources/ProcessorExpert.c ****   //printf("Distancia en cm: %u\r\n", cm);
  95:../Sources/ProcessorExpert.c ****   
  96:../Sources/ProcessorExpert.c ****   LEDR_Put(cm<10); /* red LED if object closer than 10 cm */
  86              		.loc 1 96 0
  87 0024 194B     		ldr	r3, .L8
  88 0026 1B88     		ldrh	r3, [r3]
  89 0028 092B     		cmp	r3, #9
  90 002a 05D8     		bhi	.L2
  91              		.loc 1 96 0 is_stmt 0
  92 002c 184B     		ldr	r3, .L8+4
  93 002e 5B69     		ldr	r3, [r3, #20]
  94 0030 181C     		mov	r0, r3
  95 0032 FFF7FEFF 		bl	BitIoLdd3_ClrVal
  96 0036 04E0     		b	.L3
  97              	.L2:
  98              		.loc 1 96 0
  99 0038 154B     		ldr	r3, .L8+4
 100 003a 5B69     		ldr	r3, [r3, #20]
 101 003c 181C     		mov	r0, r3
 102 003e FFF7FEFF 		bl	BitIoLdd3_SetVal
 103              	.L3:
  97:../Sources/ProcessorExpert.c ****   LEDB_Put(cm>=10&&cm<=100); /* blue LED if object is in 10..100 cm range */
 104              		.loc 1 97 0 is_stmt 1
 105 0042 124B     		ldr	r3, .L8
 106 0044 1B88     		ldrh	r3, [r3]
 107 0046 092B     		cmp	r3, #9
 108 0048 09D9     		bls	.L4
 109              		.loc 1 97 0 is_stmt 0
 110 004a 104B     		ldr	r3, .L8
 111 004c 1B88     		ldrh	r3, [r3]
 112 004e 642B     		cmp	r3, #100
 113 0050 05D8     		bhi	.L4
 114              		.loc 1 97 0
 115 0052 0F4B     		ldr	r3, .L8+4
 116 0054 DB68     		ldr	r3, [r3, #12]
 117 0056 181C     		mov	r0, r3
 118 0058 FFF7FEFF 		bl	BitIoLdd2_ClrVal
 119 005c 04E0     		b	.L5
 120              	.L4:
 121              		.loc 1 97 0
 122 005e 0C4B     		ldr	r3, .L8+4
 123 0060 DB68     		ldr	r3, [r3, #12]
 124 0062 181C     		mov	r0, r3
 125 0064 FFF7FEFF 		bl	BitIoLdd2_SetVal
 126              	.L5:
  98:../Sources/ProcessorExpert.c ****   LEDG_Put(cm>100); /* green LED if farther than 100 cm */
 127              		.loc 1 98 0 is_stmt 1
 128 0068 084B     		ldr	r3, .L8
 129 006a 1B88     		ldrh	r3, [r3]
 130 006c 642B     		cmp	r3, #100
 131 006e 05D9     		bls	.L6
 132              		.loc 1 98 0 is_stmt 0
 133 0070 074B     		ldr	r3, .L8+4
 134 0072 9B68     		ldr	r3, [r3, #8]
 135 0074 181C     		mov	r0, r3
 136 0076 FFF7FEFF 		bl	BitIoLdd1_ClrVal
 137 007a 04E0     		b	.L1
 138              	.L6:
 139              		.loc 1 98 0
 140 007c 044B     		ldr	r3, .L8+4
 141 007e 9B68     		ldr	r3, [r3, #8]
 142 0080 181C     		mov	r0, r3
 143 0082 FFF7FEFF 		bl	BitIoLdd1_SetVal
 144              	.L1:
  99:../Sources/ProcessorExpert.c **** 
 100:../Sources/ProcessorExpert.c **** }
 145              		.loc 1 100 0 is_stmt 1
 146 0086 BD46     		mov	sp, r7
 147 0088 03B0     		add	sp, sp, #12
 148              		@ sp needed for prologue
 149 008a 90BD     		pop	{r4, r7, pc}
 150              	.L9:
 151              		.align	2
 152              	.L8:
 153 008c 00000000 		.word	cm
 154 0090 00000000 		.word	PE_LDD_DeviceDataList
 155              		.cfi_endproc
 156              	.LFE0:
 158              		.global	__aeabi_f2d
 159              		.section	.rodata
 160              		.align	2
 161              	.LC17:
 162 0000 25642C25 		.ascii	"%d,%.6f,%.6f, %u\015\012\000"
 162      2E36662C 
 162      252E3666 
 162      2C202575 
 162      0D0A00
 163 0013 00       		.section	.text.main,"ax",%progbits
 164              		.align	2
 165              		.global	main
 166              		.code	16
 167              		.thumb_func
 169              	main:
 170              	.LFB1:
 101:../Sources/ProcessorExpert.c **** 
 102:../Sources/ProcessorExpert.c **** 
 103:../Sources/ProcessorExpert.c **** int main(void)
 104:../Sources/ProcessorExpert.c **** {
 171              		.loc 1 104 0
 172              		.cfi_startproc
 173 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 174              	.LCFI3:
 175              		.cfi_def_cfa_offset 20
 176              		.cfi_offset 4, -20
 177              		.cfi_offset 5, -16
 178              		.cfi_offset 6, -12
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 8BB0     		sub	sp, sp, #44
 182              	.LCFI4:
 183              		.cfi_def_cfa_offset 64
 184 0004 06AF     		add	r7, sp, #24
 185              	.LCFI5:
 186              		.cfi_def_cfa 7, 40
 105:../Sources/ProcessorExpert.c ****   /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
 106:../Sources/ProcessorExpert.c ****   PE_low_level_init();
 187              		.loc 1 106 0
 188 0006 FFF7FEFF 		bl	PE_low_level_init
 107:../Sources/ProcessorExpert.c ****   /*** End of Processor Expert internal initialization.                    ***/
 108:../Sources/ProcessorExpert.c **** 
 109:../Sources/ProcessorExpert.c ****   /* Write your code here */
 110:../Sources/ProcessorExpert.c **** 	/**************
 111:../Sources/ProcessorExpert.c **** 	* Accelerometer Init
 112:../Sources/ProcessorExpert.c **** 	***************/
 113:../Sources/ProcessorExpert.c **** 	AccReady = 0;
 189              		.loc 1 113 0
 190 000a 674B     		ldr	r3, .L16
 191 000c 0022     		mov	r2, #0
 192 000e 1A70     		strb	r2, [r3]
 114:../Sources/ProcessorExpert.c **** 	MCU_Init();
 193              		.loc 1 114 0
 194 0010 FFF7FEFF 		bl	MCU_Init
 115:../Sources/ProcessorExpert.c **** 	Accelerometer_Init();
 195              		.loc 1 115 0
 196 0014 FFF7FEFF 		bl	Accelerometer_Init
 116:../Sources/ProcessorExpert.c **** 	Calibrate();  
 197              		.loc 1 116 0
 198 0018 FFF7FEFF 		bl	Calibrate
 117:../Sources/ProcessorExpert.c **** 	
 118:../Sources/ProcessorExpert.c **** 	/**************
 119:../Sources/ProcessorExpert.c **** 	* PWM Init
 120:../Sources/ProcessorExpert.c **** 	**************/
 121:../Sources/ProcessorExpert.c **** 	PWM_Motors_Init();
 199              		.loc 1 121 0
 200 001c FFF7FEFF 		bl	PWM_Motors_Init
 122:../Sources/ProcessorExpert.c **** 	
 123:../Sources/ProcessorExpert.c **** 	/**************
 124:../Sources/ProcessorExpert.c **** 	* Ultrasonic sensor
 125:../Sources/ProcessorExpert.c **** 	**************/
 126:../Sources/ProcessorExpert.c **** 	US_Init();
 201              		.loc 1 126 0
 202 0020 FFF7FEFF 		bl	US_Init
 127:../Sources/ProcessorExpert.c **** 	
 128:../Sources/ProcessorExpert.c **** 	/**************
 129:../Sources/ProcessorExpert.c **** 	* Serial Communication Init
 130:../Sources/ProcessorExpert.c **** 	***************/
 131:../Sources/ProcessorExpert.c **** 	PrintReady = 0;
 203              		.loc 1 131 0
 204 0024 614B     		ldr	r3, .L16+4
 205 0026 0022     		mov	r2, #0
 206 0028 1A70     		strb	r2, [r3]
 132:../Sources/ProcessorExpert.c **** 	int count = 0;
 207              		.loc 1 132 0
 208 002a 0023     		mov	r3, #0
 209 002c FB60     		str	r3, [r7, #12]
 133:../Sources/ProcessorExpert.c **** 	ConsoleIO_Init();
 210              		.loc 1 133 0
 211 002e FFF7FEFF 		bl	ConsoleIO_Init
 134:../Sources/ProcessorExpert.c **** 	//SysTick_Init();
 135:../Sources/ProcessorExpert.c **** 	
 136:../Sources/ProcessorExpert.c **** 	/**************
 137:../Sources/ProcessorExpert.c **** 	PID init
 138:../Sources/ProcessorExpert.c **** 	**************/
 139:../Sources/ProcessorExpert.c **** 	/*Specify initial tuning parameters*/
 140:../Sources/ProcessorExpert.c **** 	float Kp=8000, Ki=0, Kd=0; //0,2000,400
 212              		.loc 1 140 0
 213 0032 5F4B     		ldr	r3, .L16+8
 214 0034 BB60     		str	r3, [r7, #8]
 215 0036 0023     		mov	r3, #0
 216 0038 7B60     		str	r3, [r7, #4]
 217 003a 0023     		mov	r3, #0
 218 003c 3B60     		str	r3, [r7]
 141:../Sources/ProcessorExpert.c **** 	/* Init Axis Y PID*/
 142:../Sources/ProcessorExpert.c **** 	PID_Init(&XaxisA, &Input_g.X, &Output_pwm.XA, &Target_g.X, Kp, Ki, Kd, P_ON_E,REVERSE);
 219              		.loc 1 142 0
 220 003e 5D48     		ldr	r0, .L16+12
 221 0040 5D49     		ldr	r1, .L16+16
 222 0042 5E4A     		ldr	r2, .L16+20
 223 0044 5E4B     		ldr	r3, .L16+24
 224 0046 BC68     		ldr	r4, [r7, #8]
 225 0048 0094     		str	r4, [sp]
 226 004a 7C68     		ldr	r4, [r7, #4]
 227 004c 0194     		str	r4, [sp, #4]
 228 004e 3C68     		ldr	r4, [r7]
 229 0050 0294     		str	r4, [sp, #8]
 230 0052 0124     		mov	r4, #1
 231 0054 0394     		str	r4, [sp, #12]
 232 0056 0124     		mov	r4, #1
 233 0058 0494     		str	r4, [sp, #16]
 234 005a FFF7FEFF 		bl	PID_Init
 143:../Sources/ProcessorExpert.c **** 	PID_Init(&YaxisA, &Input_g.Y, &Output_pwm.YA, &Target_g.Y, Kp, Ki, Kd, P_ON_E,DIRECT);
 235              		.loc 1 143 0
 236 005e 5948     		ldr	r0, .L16+28
 237 0060 5949     		ldr	r1, .L16+32
 238 0062 5A4A     		ldr	r2, .L16+36
 239 0064 5A4B     		ldr	r3, .L16+40
 240 0066 BC68     		ldr	r4, [r7, #8]
 241 0068 0094     		str	r4, [sp]
 242 006a 7C68     		ldr	r4, [r7, #4]
 243 006c 0194     		str	r4, [sp, #4]
 244 006e 3C68     		ldr	r4, [r7]
 245 0070 0294     		str	r4, [sp, #8]
 246 0072 0124     		mov	r4, #1
 247 0074 0394     		str	r4, [sp, #12]
 248 0076 0024     		mov	r4, #0
 249 0078 0494     		str	r4, [sp, #16]
 250 007a FFF7FEFF 		bl	PID_Init
 144:../Sources/ProcessorExpert.c **** 	PID_Init(&XaxisB, &Input_g.X, &Output_pwm.XB, &Target_g.X, Kp, Ki, Kd, P_ON_E,DIRECT);
 251              		.loc 1 144 0
 252 007e 5548     		ldr	r0, .L16+44
 253 0080 4D49     		ldr	r1, .L16+16
 254 0082 554A     		ldr	r2, .L16+48
 255 0084 4E4B     		ldr	r3, .L16+24
 256 0086 BC68     		ldr	r4, [r7, #8]
 257 0088 0094     		str	r4, [sp]
 258 008a 7C68     		ldr	r4, [r7, #4]
 259 008c 0194     		str	r4, [sp, #4]
 260 008e 3C68     		ldr	r4, [r7]
 261 0090 0294     		str	r4, [sp, #8]
 262 0092 0124     		mov	r4, #1
 263 0094 0394     		str	r4, [sp, #12]
 264 0096 0024     		mov	r4, #0
 265 0098 0494     		str	r4, [sp, #16]
 266 009a FFF7FEFF 		bl	PID_Init
 145:../Sources/ProcessorExpert.c **** 	PID_Init(&YaxisB, &Input_g.Y, &Output_pwm.YB, &Target_g.Y, Kp, Ki, Kd, P_ON_E,REVERSE);
 267              		.loc 1 145 0
 268 009e 4F48     		ldr	r0, .L16+52
 269 00a0 4949     		ldr	r1, .L16+32
 270 00a2 4F4A     		ldr	r2, .L16+56
 271 00a4 4A4B     		ldr	r3, .L16+40
 272 00a6 BC68     		ldr	r4, [r7, #8]
 273 00a8 0094     		str	r4, [sp]
 274 00aa 7C68     		ldr	r4, [r7, #4]
 275 00ac 0194     		str	r4, [sp, #4]
 276 00ae 3C68     		ldr	r4, [r7]
 277 00b0 0294     		str	r4, [sp, #8]
 278 00b2 0124     		mov	r4, #1
 279 00b4 0394     		str	r4, [sp, #12]
 280 00b6 0124     		mov	r4, #1
 281 00b8 0494     		str	r4, [sp, #16]
 282 00ba FFF7FEFF 		bl	PID_Init
 146:../Sources/ProcessorExpert.c **** 	
 147:../Sources/ProcessorExpert.c **** 	while(!AccReady){}; //Read Accelerometer to init PID
 283              		.loc 1 147 0
 284 00be C046     		mov	r8, r8
 285              	.L11:
 286              		.loc 1 147 0 is_stmt 0
 287 00c0 394B     		ldr	r3, .L16
 288 00c2 1B78     		ldrb	r3, [r3]
 289 00c4 002B     		cmp	r3, #0
 290 00c6 FBD0     		beq	.L11
 148:../Sources/ProcessorExpert.c **** 	AccReadValues(&Input_g.X, &Input_g.Y);
 291              		.loc 1 148 0 is_stmt 1
 292 00c8 3B4A     		ldr	r2, .L16+16
 293 00ca 3F4B     		ldr	r3, .L16+32
 294 00cc 101C     		mov	r0, r2
 295 00ce 191C     		mov	r1, r3
 296 00d0 FFF7FEFF 		bl	AccReadValues
 149:../Sources/ProcessorExpert.c **** 	AccReady = 0;
 297              		.loc 1 149 0
 298 00d4 344B     		ldr	r3, .L16
 299 00d6 0022     		mov	r2, #0
 300 00d8 1A70     		strb	r2, [r3]
 150:../Sources/ProcessorExpert.c **** 	
 151:../Sources/ProcessorExpert.c **** 	/*Turn On PID*/
 152:../Sources/ProcessorExpert.c **** 	PID_SetMode(&XaxisA, AUTOMATIC);
 301              		.loc 1 152 0
 302 00da 364B     		ldr	r3, .L16+12
 303 00dc 181C     		mov	r0, r3
 304 00de 0121     		mov	r1, #1
 305 00e0 FFF7FEFF 		bl	PID_SetMode
 153:../Sources/ProcessorExpert.c **** 	PID_SetMode(&XaxisB, AUTOMATIC);
 306              		.loc 1 153 0
 307 00e4 3B4B     		ldr	r3, .L16+44
 308 00e6 181C     		mov	r0, r3
 309 00e8 0121     		mov	r1, #1
 310 00ea FFF7FEFF 		bl	PID_SetMode
 154:../Sources/ProcessorExpert.c **** 	PID_SetMode(&YaxisA, AUTOMATIC);
 311              		.loc 1 154 0
 312 00ee 354B     		ldr	r3, .L16+28
 313 00f0 181C     		mov	r0, r3
 314 00f2 0121     		mov	r1, #1
 315 00f4 FFF7FEFF 		bl	PID_SetMode
 155:../Sources/ProcessorExpert.c **** 	PID_SetMode(&YaxisB, AUTOMATIC);
 316              		.loc 1 155 0
 317 00f8 384B     		ldr	r3, .L16+52
 318 00fa 181C     		mov	r0, r3
 319 00fc 0121     		mov	r1, #1
 320 00fe FFF7FEFF 		bl	PID_SetMode
 321 0102 00E0     		b	.L14
 322              	.L15:
 156:../Sources/ProcessorExpert.c **** 	
 157:../Sources/ProcessorExpert.c **** 	
 158:../Sources/ProcessorExpert.c **** 	while(1)
 159:../Sources/ProcessorExpert.c ****   {
 160:../Sources/ProcessorExpert.c **** 
 161:../Sources/ProcessorExpert.c **** 		if (AccReady)		// Is a new set of data ready? 
 162:../Sources/ProcessorExpert.c **** 		{  		
 163:../Sources/ProcessorExpert.c **** 			AccReady = 0;
 164:../Sources/ProcessorExpert.c **** 																	
 165:../Sources/ProcessorExpert.c **** 			AccReadValues(&Input_g.X, &Input_g.Y);
 166:../Sources/ProcessorExpert.c **** 			Measure_Distance();
 167:../Sources/ProcessorExpert.c **** 
 168:../Sources/ProcessorExpert.c **** 			PID_Compute(&XaxisA); //PID computing
 169:../Sources/ProcessorExpert.c **** 			PID_Compute(&YaxisA); //PID computing
 170:../Sources/ProcessorExpert.c **** 			PID_Compute(&XaxisB);
 171:../Sources/ProcessorExpert.c **** 			PID_Compute(&YaxisB);
 172:../Sources/ProcessorExpert.c **** 
 173:../Sources/ProcessorExpert.c **** 			PWM_Motor_Duty_Cycle(Output_pwm.YA, Output_pwm.XA, Output_pwm.YB, Output_pwm.XB, 0);
 174:../Sources/ProcessorExpert.c **** 			//PWM_Motor_Duty_Cycle(0, 0, 0, 0, (400-cm)*cm_to_pwm*0);
 175:../Sources/ProcessorExpert.c **** 						
 176:../Sources/ProcessorExpert.c **** 		} 
 177:../Sources/ProcessorExpert.c **** 		if (PrintReady){
 178:../Sources/ProcessorExpert.c **** 			PrintReady = 0;
 179:../Sources/ProcessorExpert.c **** 			count++;
 180:../Sources/ProcessorExpert.c **** 			printf("%d,%.6f,%.6f, %u\r\n", count, Input_g.X, Input_g.Y, cm);
 181:../Sources/ProcessorExpert.c **** 			
 182:../Sources/ProcessorExpert.c **** 		}
 183:../Sources/ProcessorExpert.c **** 		
 184:../Sources/ProcessorExpert.c **** 	}
 323              		.loc 1 184 0
 324 0104 C046     		mov	r8, r8
 325              	.L14:
 161:../Sources/ProcessorExpert.c **** 		if (AccReady)		// Is a new set of data ready? 
 326              		.loc 1 161 0
 327 0106 284B     		ldr	r3, .L16
 328 0108 1B78     		ldrb	r3, [r3]
 329 010a 002B     		cmp	r3, #0
 330 010c 26D0     		beq	.L12
 163:../Sources/ProcessorExpert.c **** 			AccReady = 0;
 331              		.loc 1 163 0
 332 010e 264B     		ldr	r3, .L16
 333 0110 0022     		mov	r2, #0
 334 0112 1A70     		strb	r2, [r3]
 165:../Sources/ProcessorExpert.c **** 			AccReadValues(&Input_g.X, &Input_g.Y);
 335              		.loc 1 165 0
 336 0114 284A     		ldr	r2, .L16+16
 337 0116 2C4B     		ldr	r3, .L16+32
 338 0118 101C     		mov	r0, r2
 339 011a 191C     		mov	r1, r3
 340 011c FFF7FEFF 		bl	AccReadValues
 166:../Sources/ProcessorExpert.c **** 			Measure_Distance();
 341              		.loc 1 166 0
 342 0120 FFF7FEFF 		bl	Measure_Distance
 168:../Sources/ProcessorExpert.c **** 			PID_Compute(&XaxisA); //PID computing
 343              		.loc 1 168 0
 344 0124 234B     		ldr	r3, .L16+12
 345 0126 181C     		mov	r0, r3
 346 0128 FFF7FEFF 		bl	PID_Compute
 169:../Sources/ProcessorExpert.c **** 			PID_Compute(&YaxisA); //PID computing
 347              		.loc 1 169 0
 348 012c 254B     		ldr	r3, .L16+28
 349 012e 181C     		mov	r0, r3
 350 0130 FFF7FEFF 		bl	PID_Compute
 170:../Sources/ProcessorExpert.c **** 			PID_Compute(&XaxisB);
 351              		.loc 1 170 0
 352 0134 274B     		ldr	r3, .L16+44
 353 0136 181C     		mov	r0, r3
 354 0138 FFF7FEFF 		bl	PID_Compute
 171:../Sources/ProcessorExpert.c **** 			PID_Compute(&YaxisB);
 355              		.loc 1 171 0
 356 013c 274B     		ldr	r3, .L16+52
 357 013e 181C     		mov	r0, r3
 358 0140 FFF7FEFF 		bl	PID_Compute
 173:../Sources/ProcessorExpert.c **** 			PWM_Motor_Duty_Cycle(Output_pwm.YA, Output_pwm.XA, Output_pwm.YB, Output_pwm.XB, 0);
 359              		.loc 1 173 0
 360 0144 1D4B     		ldr	r3, .L16+20
 361 0146 9868     		ldr	r0, [r3, #8]
 362 0148 1C4B     		ldr	r3, .L16+20
 363 014a 1968     		ldr	r1, [r3]
 364 014c 1B4B     		ldr	r3, .L16+20
 365 014e DA68     		ldr	r2, [r3, #12]
 366 0150 1A4B     		ldr	r3, .L16+20
 367 0152 5B68     		ldr	r3, [r3, #4]
 368 0154 0024     		mov	r4, #0
 369 0156 0094     		str	r4, [sp]
 370 0158 FFF7FEFF 		bl	PWM_Motor_Duty_Cycle
 371              	.L12:
 177:../Sources/ProcessorExpert.c **** 		if (PrintReady){
 372              		.loc 1 177 0
 373 015c 134B     		ldr	r3, .L16+4
 374 015e 1B78     		ldrb	r3, [r3]
 375 0160 002B     		cmp	r3, #0
 376 0162 CFD0     		beq	.L15
 178:../Sources/ProcessorExpert.c **** 			PrintReady = 0;
 377              		.loc 1 178 0
 378 0164 114B     		ldr	r3, .L16+4
 379 0166 0022     		mov	r2, #0
 380 0168 1A70     		strb	r2, [r3]
 179:../Sources/ProcessorExpert.c **** 			count++;
 381              		.loc 1 179 0
 382 016a FB68     		ldr	r3, [r7, #12]
 383 016c 0133     		add	r3, r3, #1
 384 016e FB60     		str	r3, [r7, #12]
 180:../Sources/ProcessorExpert.c **** 			printf("%d,%.6f,%.6f, %u\r\n", count, Input_g.X, Input_g.Y, cm);
 385              		.loc 1 180 0
 386 0170 114B     		ldr	r3, .L16+16
 387 0172 1B68     		ldr	r3, [r3]
 388 0174 181C     		add	r0, r3, #0
 389 0176 FFF7FEFF 		bl	__aeabi_f2d
 390 017a 041C     		mov	r4, r0
 391 017c 0D1C     		mov	r5, r1
 392 017e 0E4B     		ldr	r3, .L16+16
 393 0180 5B68     		ldr	r3, [r3, #4]
 394 0182 181C     		add	r0, r3, #0
 395 0184 FFF7FEFF 		bl	__aeabi_f2d
 396 0188 021C     		mov	r2, r0
 397 018a 0B1C     		mov	r3, r1
 398 018c 1549     		ldr	r1, .L16+60
 399 018e 0988     		ldrh	r1, [r1]
 400 0190 0E1C     		mov	r6, r1
 401 0192 1548     		ldr	r0, .L16+64
 402 0194 F968     		ldr	r1, [r7, #12]
 403 0196 0092     		str	r2, [sp]
 404 0198 0193     		str	r3, [sp, #4]
 405 019a 0296     		str	r6, [sp, #8]
 406 019c 221C     		mov	r2, r4
 407 019e 2B1C     		mov	r3, r5
 408 01a0 FFF7FEFF 		bl	printf
 409              		.loc 1 184 0
 410 01a4 AEE7     		b	.L15
 411              	.L17:
 412 01a6 C046     		.align	2
 413              	.L16:
 414 01a8 00000000 		.word	AccReady
 415 01ac 00000000 		.word	PrintReady
 416 01b0 0000FA45 		.word	1174011904
 417 01b4 00000000 		.word	XaxisA
 418 01b8 00000000 		.word	Input_g
 419 01bc 00000000 		.word	Output_pwm
 420 01c0 00000000 		.word	Target_g
 421 01c4 00000000 		.word	YaxisA
 422 01c8 04000000 		.word	Input_g+4
 423 01cc 08000000 		.word	Output_pwm+8
 424 01d0 04000000 		.word	Target_g+4
 425 01d4 00000000 		.word	XaxisB
 426 01d8 04000000 		.word	Output_pwm+4
 427 01dc 00000000 		.word	YaxisB
 428 01e0 0C000000 		.word	Output_pwm+12
 429 01e4 00000000 		.word	cm
 430 01e8 00000000 		.word	.LC17
 431              		.cfi_endproc
 432              	.LFE1:
 434              		.text
 435              	.Letext0:
 436              		.file 2 "D:/Git/DronePrototype/Project_Headers/derivative.h"
 437              		.file 3 "D:/Freescale/CodeWarrior11/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 438              		.file 4 "D:/Git/DronePrototype/Project_Headers/PID.h"
 439              		.file 5 "D:/Git/DronePrototype/Project_Headers/global.h"
 440              		.file 6 "D:/Git/DronePrototype/Generated_Code/PE_Types.h"
 441              		.file 7 "D:/Git/DronePrototype/Project_Headers/Acc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ProcessorExpert.c
                            *COM*:00000001 AccReady
                            *COM*:00000001 PrintReady
                            *COM*:00000006 AccData
                            *COM*:00000002 Xout_14_bit
                            *COM*:00000002 Yout_14_bit
                            *COM*:00000002 Zout_14_bit
                            *COM*:00000004 Zout_g
                            *COM*:00000001 Xoffset
                            *COM*:00000001 Yoffset
                            *COM*:00000001 Zoffset
                            *COM*:00000008 Input_g
C:\Users\David\AppData\Local\Temp\cc7GxD9x.s:33     .bss.Target_g:00000000 Target_g
C:\Users\David\AppData\Local\Temp\cc7GxD9x.s:30     .bss.Target_g:00000000 $d
                            *COM*:00000010 Output_pwm
                            *COM*:00000048 XaxisA
                            *COM*:00000048 XaxisB
                            *COM*:00000048 YaxisA
                            *COM*:00000048 YaxisB
                            *COM*:00000002 cm
C:\Users\David\AppData\Local\Temp\cc7GxD9x.s:46     .data.cm_to_pwm:00000000 cm_to_pwm
C:\Users\David\AppData\Local\Temp\cc7GxD9x.s:43     .data.cm_to_pwm:00000000 $d
C:\Users\David\AppData\Local\Temp\cc7GxD9x.s:49     .text.Measure_Distance:00000000 $t
C:\Users\David\AppData\Local\Temp\cc7GxD9x.s:54     .text.Measure_Distance:00000000 Measure_Distance
C:\Users\David\AppData\Local\Temp\cc7GxD9x.s:153    .text.Measure_Distance:0000008c $d
C:\Users\David\AppData\Local\Temp\cc7GxD9x.s:160    .rodata:00000000 $d
C:\Users\David\AppData\Local\Temp\cc7GxD9x.s:164    .text.main:00000000 $t
C:\Users\David\AppData\Local\Temp\cc7GxD9x.s:169    .text.main:00000000 main
C:\Users\David\AppData\Local\Temp\cc7GxD9x.s:414    .text.main:000001a8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
US_Measure_us
US_usToCentimeters
BitIoLdd3_ClrVal
BitIoLdd3_SetVal
BitIoLdd2_ClrVal
BitIoLdd2_SetVal
BitIoLdd1_ClrVal
BitIoLdd1_SetVal
PE_LDD_DeviceDataList
__aeabi_f2d
PE_low_level_init
MCU_Init
Accelerometer_Init
Calibrate
PWM_Motors_Init
US_Init
ConsoleIO_Init
PID_Init
AccReadValues
PID_SetMode
PID_Compute
PWM_Motor_Duty_Cycle
printf
